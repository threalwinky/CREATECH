# Import Libraries
from flask import *
from flask_mail import Mail, Message
from flask_sqlalchemy import SQLAlchemy
from flask_socketio import *
from dotenv import load_dotenv
from datetime import timedelta
import json
import os
import shutil
import string
import random
from werkzeug.utils import secure_filename
import pathlib
import requests
from google.oauth2 import id_token
from google_auth_oauthlib.flow import Flow
from pip._vendor import cachecontrol
import google.auth.transport.requests
from hashlib import sha256
from pprint import pprint
from unidecode import unidecode
import random
import json
import nltk
from nltk.stem.porter import PorterStemmer
import numpy as np
import torch
import torch.nn as nn
from datetime import *
from datasets import load_dataset
import random

l = [["b'Solve -32146 + 27358 = 114*k for k.\\n'", "b'-42\\n'"], ["b'Solve 14*w - 85*w + 17*w + 20*w + 272 = 0 for w.\\n'", "b'8\\n'"], ["b'Solve -578*f = -271*f - 346*f - 1443 for f.\\n'", "b'-37\\n'"], ["b'Solve -697*h = -274*h - 18189 for h.\\n'", "b'43\\n'"], ["b'Solve 10066 = -425*b - 5659 for b.\\n'", "b'-37\\n'"], ["b'Solve -1726 = -392*o + 2106 + 3224 for o.\\n'", "b'18\\n'"], ["b'Solve -3*w - 1498 - 3626 = 119*w for w.\\n'", "b'-42\\n'"], ["b'Solve 0 = 16*d - 5167 + 5871 for d.\\n'", "b'-44\\n'"], ["b'Solve 185*t + 696 = -13*t - 150*t for t.\\n'", "b'-2\\n'"], ["b'Solve -46*j = 299191 - 299835 for j.\\n'", "b'14\\n'"], ["b'Solve -560*z = -58*z + 1138 + 10910 for z.\\n'", "b'-24\\n'"], ["b'Solve 0 = 1275*u - 38612 + 15662 for u.\\n'", "b'18\\n'"], ["b'Solve 510 - 3131 - 204 = 301*s + 2894 for s.\\n'", "b'-19\\n'"], ["b'Solve 41579 - 2078 = -265*j - 1198*j for j.\\n'", "b'-27\\n'"], ["b'Solve 0 = -23777*b + 24283*b - 20746 for b.\\n'", "b'41\\n'"], ["b'Solve 450*t = 239*t - 10339 for t.\\n'", "b'-49\\n'"], ["b'Solve -33*h - 540 + 1365 = 0 for h.\\n'", "b'25\\n'"], ["b'Solve 36*u - 2386*u + 37537 = -63513 for u.\\n'", "b'43\\n'"], ["b'Solve 255*d + 131 + 7321 = 48*d for d.\\n'", "b'-36\\n'"], ["b'Solve 1018*w - 5590 = 186 + 8949 + 3599 for w.\\n'", "b'18\\n'"], ["b'Solve -1165*w - 7546 = -58806 for w.\\n'", "b'44\\n'"], ["b'Solve -94*g = 131*g - 42 - 633 for g.\\n'", "b'3\\n'"], ["b'Solve -489923*a + 489969*a + 368 = 0 for a.\\n'", "b'-8\\n'"], ["b'Solve 0 = 240*c + 126*c + 88*c - 11141 - 1571 for c.\\n'", "b'28\\n'"], ["b'Solve -663*w + 53703 = 682*w - 86*w + 118*w for w.\\n'", "b'39\\n'"], ["b'Solve -639*i = -932*i - 4688 for i.\\n'", "b'-16\\n'"], ["b'Solve -1334*l - 1365*l = -2753*l + 1350 for l.\\n'", "b'25\\n'"], ["b'Solve 33523 - 134611 = 3159*u for u.\\n'", "b'-32\\n'"], ["b'Solve 1266885*v = 1266920*v - 140 for v.\\n'", "b'4\\n'"], ["b'Solve 46*p - 210*p + 1312 = 0 for p.\\n'", "b'8\\n'"], ["b'Solve -1498*p - 1495*p - 1491*p + 4516*p + 576 = 0 for p.\\n'", "b'-18\\n'"], ["b'Solve 1247*o - 1951*o - 22528 = 0 for o.\\n'", "b'-32\\n'"], ["b'Solve -12223 = -160*m - 15743 for m.\\n'", "b'-22\\n'"], ["b'Solve -24*l + 107 - 28 = 64 + 63 for l.\\n'", "b'-2\\n'"], ["b'Solve -10403 = -156*v - 5879 for v.\\n'", "b'29\\n'"], ["b'Solve 269*s + 5973 = -309*s + 397*s for s.\\n'", "b'-33\\n'"], ["b'Solve 39024 = 1850*y + 318*y for y.\\n'", "b'18\\n'"], ["b'Solve 1252 = -450*l + 2105 + 4997 for l.\\n'", "b'13\\n'"], ["b'Solve -248*l - 3985 = 3166 + 1215 - 2414 for l.\\n'", "b'-24\\n'"], ["b'Solve 17065 - 4353 = 454*x for x.\\n'", "b'28\\n'"], ["b'Solve -237*l - 46 - 310 - 239 = -220*l for l.\\n'", "b'-35\\n'"], ["b'Solve -152*k - 1489 = 205*k - 103*k - 11649 for k.\\n'", "b'40\\n'"], ["b'Solve 226*a + 167*a + 7127 = 245*a + 319 for a.\\n'", "b'-46\\n'"], ["b'Solve 2022*r + 476 - 9662 = 11034 for r.\\n'", "b'10\\n'"], ["b'Solve 874*j = -1284*j - 23793 - 47421 for j.\\n'", "b'-33\\n'"], ["b'Solve 68250 = -1075*z - 1655*z for z.\\n'", "b'-25\\n'"], ["b'Solve 0 = 90*n + 67 + 293 for n.\\n'", "b'-4\\n'"], ["b'Solve 9192 = -343*i + 5076 for i.\\n'", "b'-12\\n'"], ["b'Solve 570*h - 4707 - 5215 - 1478 = 0 for h.\\n'", "b'20\\n'"], ["b'Solve 293*q - 5692 = 2805 for q.\\n'", "b'29\\n'"], ["b'Solve 40 = 4035756*d - 4035757*d for d.\\n'", "b'-40\\n'"], ["b'Solve 380 + 291 + 573 = 51*n + 173 for n.\\n'", "b'21\\n'"], ["b'Solve -400108*i + 400082*i = -702 for i.\\n'", "b'27\\n'"], ["b'Solve -11*s = 121*s - 33*s - 47 + 47 for s.\\n'", "b'0\\n'"], ["b'Solve -1432*b + 59252 + 66834 = 1309*b for b.\\n'", "b'46\\n'"], ["b'Solve -1237 = 73*g - 4449 for g.\\n'", "b'44\\n'"], ["b'Solve 747*j + 11187 = 368*j - 638*j for j.\\n'", "b'-11\\n'"], ["b'Solve 1489*v + 8841 = -37091 - 7672 for v.\\n'", "b'-36\\n'"], ["b'Solve -111*u - 2394 - 3437 = 190*u + 42*u for u.\\n'", "b'-17\\n'"], ["b'Solve -16*o + 184 - 497 - 297 = -18 for o.\\n'", "b'-37\\n'"], ["b'Solve 99*a + 600 = -723 - 162 for a.\\n'", "b'-15\\n'"], ["b'Solve 97*x + 0*x - 2398 = -183 + 2150 for x.\\n'", "b'45\\n'"], ["b'Solve -842*s = 511*s - 33825 for s.\\n'", "b'25\\n'"], ["b'Solve 175 = 41142*r - 41177*r for r.\\n'", "b'-5\\n'"], ["b'Solve 1085*m - 13131 = -259*m + 23157 for m.\\n'", "b'27\\n'"], ["b'Solve 0 = 2900*x - 23283 - 37617 for x.\\n'", "b'21\\n'"], ["b'Solve 0 = -163*u - 80*u - 2317 - 1328 for u.\\n'", "b'-15\\n'"], ["b'Solve -225*z - 13 - 248 = -216*z for z.\\n'", "b'-29\\n'"], ["b'Solve -682 - 1552 = 42*g - 260 for g.\\n'", "b'-47\\n'"], ["b'Solve -9937 = 120*n - 12337 for n.\\n'", "b'20\\n'"], ["b'Solve 56*x + 9*x = 12*x + 11*x + 1764 for x.\\n'", "b'42\\n'"], ["b'Solve -223*v - 1379 = -71*v + 1737 - 380 for v.\\n'", "b'-18\\n'"], ["b'Solve 6557 = -2144*q + 125 for q.\\n'", "b'-3\\n'"], ["b'Solve 5*j = 4*j + 24*j - 1600 + 1186 for j.\\n'", "b'18\\n'"], ["b'Solve -23903 = -925*i - 48*i - 218 + 20100 for i.\\n'", "b'45\\n'"], ["b'Solve 62*p - 62 - 554 - 397 = 351 for p.\\n'", "b'22\\n'"], ["b'Solve -1071*u + 151*u + 15309 - 1509 = 0 for u.\\n'", "b'15\\n'"], ["b'Solve 509*y = -10800 + 29633 for y.\\n'", "b'37\\n'"], ["b'Solve -202*z + 55*z - 154*z - 8663 - 2775 = 0 for z.\\n'", "b'-38\\n'"], ["b'Solve 0 = -2839*s + 4429*s - 54060 for s.\\n'", "b'34\\n'"], ["b'Solve -465*t - 630*t - 449*t + 371*t + 26979 = 0 for t.\\n'", "b'23\\n'"], ["b'Solve -72*m + 348 = 101 - 185 for m.\\n'", "b'6\\n'"], ["b'Solve 0 = 41*o - 204 + 996 + 889 for o.\\n'", "b'-41\\n'"], ["b'Solve 0 = 39453*s - 39342*s + 1776 for s.\\n'", "b'-16\\n'"], ["b'Solve 13*x = 223*x - 649 + 2629 + 2010 for x.\\n'", "b'-19\\n'"], ["b'Solve -39092*x - 315 = 39101*x - 78148*x for x.\\n'", "b'-7\\n'"], ["b'Solve 395*j = -25*j + 840 for j.\\n'", "b'2\\n'"], ["b'Solve 0 = 706*d + 701*d - 1368*d + 1755 for d.\\n'", "b'-45\\n'"], ["b'Solve -3064*n = -3175*n - 1909 - 1865 for n.\\n'", "b'-34\\n'"], ["b'Solve -133 - 141 = -8*a - 38*a + 186 for a.\\n'", "b'10\\n'"], ["b'Solve 384*o + 21341 - 11741 = 0 for o.\\n'", "b'-25\\n'"], ["b'Solve -1197*g + 1050*g - 3831 = 2196 for g.\\n'", "b'-41\\n'"], ["b'Solve -54245 = 2635*s + 263*s + 81961 for s.\\n'", "b'-47\\n'"], ["b'Solve 0 = -39*l + 45044 - 45005 for l.\\n'", "b'1\\n'"], ["b'Solve -54*s + 558 = 22 + 101 - 159 for s.\\n'", "b'11\\n'"], ["b'Solve -525 = 330357*b - 330322*b for b.\\n'", "b'-15\\n'"], ["b'Solve 1119 = -65*t + 613 - 989 for t.\\n'", "b'-23\\n'"], ["b'Solve 139*c = 1468 - 364 + 842 for c.\\n'", "b'14\\n'"], ["b'Solve -354*q = 19*q - 2387*q - 1717*q + 33579 for q.\\n'", "b'9\\n'"], ["b'Solve -51*q - 66*q + 3050 - 2383 = -3545 for q.\\n'", "b'36\\n'"], ["b'Solve 0 = 3262*j + 25581 - 6009 for j.\\n'", "b'-6\\n'"], ["b'Solve -1440 = -96*w - 264*w for w.\\n'", "b'4\\n'"], ["b'Solve 1316 = 378*l - 12670 for l.\\n'", "b'37\\n'"], ["b'Solve -42*z + 62 = 571 + 919 for z.\\n'", "b'-34\\n'"], ["b'Solve -118*y - 122*y + 344 - 2294 = -370*y for y.\\n'", "b'15\\n'"], ["b'Solve -1558 + 1242 - 1944 = 113*y for y.\\n'", "b'-20\\n'"], ["b'Solve 196*u + 1601*u + 275*u - 37296 = 0 for u.\\n'", "b'18\\n'"], ["b'Solve -980*x - 497*x - 28188 - 35217 = -68*x for x.\\n'", "b'-45\\n'"], ["b'Solve 20355 = 2113*y - 2888 for y.\\n'", "b'11\\n'"], ["b'Solve 179*l - 131*l - 263 - 60 - 205 = 0 for l.\\n'", "b'11\\n'"], ["b'Solve 4*p + 25*p + 70*p - 44 - 3421 = 0 for p.\\n'", "b'35\\n'"], ["b'Solve -11494*f - 108 = -11476*f for f.\\n'", "b'-6\\n'"], ["b'Solve -27*b + 1425 = 17*b + 21*b - 8*b for b.\\n'", "b'25\\n'"], ["b'Solve -3516 + 2034 = 451*q + 11980 + 7284 for q.\\n'", "b'-46\\n'"], ["b'Solve -3682*i - 361*i - 74353 = 123754 for i.\\n'", "b'-49\\n'"], ["b'Solve -1436*x + 249*x = -925 - 262 for x.\\n'", "b'1\\n'"], ["b'Solve -116 + 303 + 289 = 14*m + 28 for m.\\n'", "b'32\\n'"], ["b'Solve -352*p - 355*p - 243*p - 672 = -1062*p for p.\\n'", "b'6\\n'"], ["b'Solve -91*i - 1241 + 2224 = -2293 for i.\\n'", "b'36\\n'"], ["b'Solve 9427 = 203*b - 3032 + 2918 for b.\\n'", "b'47\\n'"], ["b'Solve -1117*h = 1101*h + 271 - 13579 for h.\\n'", "b'6\\n'"], ["b'Solve -108*n + 142*n + 48 = 82*n for n.\\n'", "b'1\\n'"], ["b'Solve 1034 = 4*i + 33*i - 59*i for i.\\n'", "b'-47\\n'"], ["b'Solve -469*w = 411*w + 419*w - 14289 for w.\\n'", "b'11\\n'"], ["b'Solve -570 = 1929*s - 1948*s for s.\\n'", "b'30\\n'"], ["b'Solve 683*t - 6988 - 7879 = -1890 for t.\\n'", "b'19\\n'"], ["b'Solve 2570 - 437 = 57*g + 22*g for g.\\n'", "b'27\\n'"], ["b'Solve 0 = 3208*w - 1844*w for w.\\n'", "b'0\\n'"], ["b'Solve -70*s + 86*s - 3739 = -482*s + 7715 for s.\\n'", "b'23\\n'"], ["b'Solve 17*o + 30*o + 5733 = -100*o for o.\\n'", "b'-39\\n'"], ["b'Solve 39034 - 15909 = -925*w for w.\\n'", "b'-25\\n'"], ["b'Solve 1583 - 269 + 537 = -82*j + 211 for j.\\n'", "b'-20\\n'"], ["b'Solve 34934 = -2069*g - 1059 + 4958 for g.\\n'", "b'-15\\n'"], ["b'Solve -51*l + 61*l - 3198 = -72*l for l.\\n'", "b'39\\n'"], ["b'Solve 0 = 1438*d - 1330*d - 3132 for d.\\n'", "b'29\\n'"], ["b'Solve 494*j = -15*j + 3*j - 1664 + 9254 for j.\\n'", "b'15\\n'"], ["b'Solve -24*v + 145*v = 29*v - 66*v + 6320 for v.\\n'", "b'40\\n'"], ["b'Solve -509074 + 508426 = -24*w for w.\\n'", "b'27\\n'"], ["b'Solve 2586 + 1198 = -88*r for r.\\n'", "b'-43\\n'"], ["b'Solve -537*s + 156*s - 309*s - 33810 = 0 for s.\\n'", "b'-49\\n'"], ["b'Solve -5326 = 159*p + 6749 - 4284 for p.\\n'", "b'-49\\n'"], ["b'Solve 0 = 3535*v - 8730 - 1875 for v.\\n'", "b'3\\n'"], ["b'Solve -2048*c + 5277*c = -22603 for c.\\n'", "b'-7\\n'"], ["b'Solve -117 = 1413*g + 1412*g - 2834*g for g.\\n'", "b'13\\n'"], ["b'Solve -1672*s = -237*s - 7876 + 65276 for s.\\n'", "b'-40\\n'"], ["b'Solve 38*k + 12*k - 679 - 21 = 0 for k.\\n'", "b'14\\n'"], ["b'Solve -264*u + 391 + 12199 = 1238 for u.\\n'", "b'43\\n'"], ["b'Solve 96*o - 45547 = -1135*o for o.\\n'", "b'37\\n'"], ["b'Solve 1018*w - 5590 = 186 + 8949 + 3599 for w.\\n'", "b'18\\n'"], ["b'Solve 1776*q - 1495*q + 13488 = 0 for q.\\n'", "b'-48\\n'"], ["b'Solve 204*z + 9149 - 18125 = 0 for z.\\n'", "b'44\\n'"], ["b'Solve -257*u - 4060 = -112 + 597 + 3422 for u.\\n'", "b'-31\\n'"], ["b'Solve 138*s + 12004 = -166*s + 1972 for s.\\n'", "b'-33\\n'"], ["b'Solve -370*y + 785*y - 397*y + 846 = 0 for y.\\n'", "b'-47\\n'"], ["b'Solve -8*s - 1346 = -7*s - 54*s + 350 for s.\\n'", "b'32\\n'"], ["b'Solve -21700 = -1132*f + 698*f for f.\\n'", "b'50\\n'"], ["b'Solve 0 = -9*m - 299*m + 1300 - 3880 - 4504 for m.\\n'", "b'-23\\n'"], ["b'Solve -332*o - 1128 + 2764 + 8656 = 0 for o.\\n'", "b'31\\n'"], ["b'Solve 103*u = -3*u - 1425 + 4075 for u.\\n'", "b'25\\n'"], ["b'Solve 684*f = -5773 - 9511 - 448 for f.\\n'", "b'-23\\n'"], ["b'Solve 13*n + 772 + 815 + 1533 = 169*n for n.\\n'", "b'20\\n'"], ["b'Solve -164*g - 9*g = -18*g + 37*g - 3072 for g.\\n'", "b'16\\n'"], ["b'Solve 272*j + 394 + 2836 = -51*j for j.\\n'", "b'-10\\n'"], ["b'Solve -180*j - 683 = 2377 for j.\\n'", "b'-17\\n'"], ["b'Solve -133*r - 19413 = -25930 for r.\\n'", "b'49\\n'"], ["b'Solve 2810*k = 1105*k - 61380 for k.\\n'", "b'-36\\n'"], ["b'Solve 121*t + 63*t + 47*t - 3*t = 11172 for t.\\n'", "b'49\\n'"], ["b'Solve 3531 - 30804 - 11216 = 3802*l + 3333 for l.\\n'", "b'-11\\n'"], ["b'Solve -2489*s + 60211 = -61750 for s.\\n'", "b'49\\n'"], ["b'Solve -6968 + 111 + 42673 = 94*d - 908*d for d.\\n'", "b'-44\\n'"], ["b'Solve 982 = 160*h - 698 - 1295 + 735 for h.\\n'", "b'14\\n'"], ["b'Solve -1741*q = -35737 - 29524 - 13084 for q.\\n'", "b'45\\n'"], ["b'Solve -1299*t - 349*t + 249*t - 66420 = 221*t for t.\\n'", "b'-41\\n'"], ["b'Solve -9 = -35*j - 40*j - 45 - 39 for j.\\n'", "b'-1\\n'"], ["b'Solve 1857*c - 249*c = -1144*c + 22016 for c.\\n'", "b'8\\n'"], ["b'Solve 1906 = 55*h + 531 for h.\\n'", "b'25\\n'"], ["b'Solve 0 = 594*y + 809*y + 29463 for y.\\n'", "b'-21\\n'"], ["b'Solve -90*a + 107*a + 102 = 15 - 151 for a.\\n'", "b'-14\\n'"], ["b'Solve -216 = -1047*d - 1093*d + 2086*d for d.\\n'", "b'4\\n'"], ["b'Solve 757*v + 8491 = -18761 for v.\\n'", "b'-36\\n'"], ["b'Solve 360 = 54*c + 1939 + 95 for c.\\n'", "b'-31\\n'"], ["b'Solve -648*j + 114 = -131 - 439 + 36 for j.\\n'", "b'1\\n'"], ["b'Solve 367*j - 11161 + 15158 = -14353 for j.\\n'", "b'-50\\n'"], ["b'Solve 7027*f - 6977*f = -150 for f.\\n'", "b'-3\\n'"], ["b'Solve 2122 - 12898 = 409*y + 7245 - 434 for y.\\n'", "b'-43\\n'"], ["b'Solve 279*r - 425 = -138 + 309 + 520 for r.\\n'", "b'4\\n'"], ["b'Solve 1680 = -9560134*o + 9560174*o for o.\\n'", "b'42\\n'"], ["b'Solve -64*w = -5*w - 36*w - 39*w + 288 for w.\\n'", "b'18\\n'"], ["b'Solve -1867*n = -759*n + 1732*n + 122120 for n.\\n'", "b'-43\\n'"], ["b'Solve 117*b + 19 = 137*b - 1 for b.\\n'", "b'1\\n'"], ["b'Solve -1200*j = -450 - 19950 for j.\\n'", "b'17\\n'"], ["b'Solve 938*f - 480 = 1829*f - 915*f for f.\\n'", "b'20\\n'"], ["b'Solve 3652 = -398*x + 17*x + 985 for x.\\n'", "b'-7\\n'"], ["b'Solve 0 = 3208*w - 1844*w for w.\\n'", "b'0\\n'"], ["b'Solve -467 + 248 = 35*j + 3*j + 313 for j.\\n'", "b'-14\\n'"], ["b'Solve -220*q + 8928 = -107*q + 259*q for q.\\n'", "b'24\\n'"], ["b'Solve 456*m - 554*m - 936*m = -6568 + 28282 for m.\\n'", "b'-21\\n'"], ["b'Solve 18 = -4687*h + 4684*h for h.\\n'", "b'-6\\n'"], ["b'Solve -926*c = 585*c + 66484 for c.\\n'", "b'-44\\n'"], ["b'Solve 0 = -58*l + 3478 - 3362 for l.\\n'", "b'2\\n'"], ["b'Solve -225*z - 13 - 248 = -216*z for z.\\n'", "b'-29\\n'"], ["b'Solve 835*r + 547*r = 26211 - 503 + 17134 for r.\\n'", "b'31\\n'"], ["b'Solve 63*f - 56 + 5 - 19 + 7 = 0 for f.\\n'", "b'1\\n'"], ["b'Solve -112*d + 403166 = 33*d + 409256 for d.\\n'", "b'-42\\n'"], ["b'Solve 79*f + 4 - 17 = 80*f for f.\\n'", "b'-13\\n'"], ["b'Solve 4020 - 5434 = -101*c for c.\\n'", "b'14\\n'"], ["b'Solve 162*v + 137*v - 832 = 38*v - 4486 for v.\\n'", "b'-14\\n'"], ["b'Solve 68*x - 3962 = -2058 for x.\\n'", "b'28\\n'"], ["b'Solve 313 = 54*h - 132*h + 3121 for h.\\n'", "b'36\\n'"], ["b'Solve 11*i - 694 = -47*i - 174*i + 8122 for i.\\n'", "b'38\\n'"], ["b'Solve -688*w - 1462 = -204*w + 3862 for w.\\n'", "b'-11\\n'"], ["b'Solve 211*l + 42809 = 3504*l for l.\\n'", "b'13\\n'"], ["b'Solve 2969 + 225 = 67*u - 192*u - 2181 for u.\\n'", "b'-43\\n'"], ["b'Solve -1967*h + 33511 = -510*h for h.\\n'", "b'23\\n'"], ["b'Solve -363584 = -123*y - 367274 for y.\\n'", "b'-30\\n'"], ["b'Solve 269*a + 2054 = 8*a - 295 for a.\\n'", "b'-9\\n'"], ["b'Solve -33098 = -260*w - 611*w for w.\\n'", "b'38\\n'"], ["b'Solve 8165 - 17266 = -595*h + 11724 for h.\\n'", "b'35\\n'"], ["b'Solve -1099*q + 75750 + 12162 = 1248*q + 909*q for q.\\n'", "b'27\\n'"], ["b'Solve 7*b + 4 + 188 = -36*b + 11*b for b.\\n'", "b'-6\\n'"], ["b'Solve -2*b = 52*b + 581 - 107 + 822 for b.\\n'", "b'-24\\n'"], ["b'Solve 118*n = -118*n + 217*n - 779 for n.\\n'", "b'-41\\n'"], ["b'Solve -234*i + 38476 - 38008 = 0 for i.\\n'", "b'2\\n'"], ["b'Solve 0 = -769*b + 676*b + 3348 for b.\\n'", "b'36\\n'"], ["b'Solve 3*d + 3*d - 3003 = -20*d - 2431 for d.\\n'", "b'22\\n'"], ["b'Solve -117*z - 11214 = -4*z + 66*z + 88*z for z.\\n'", "b'-42\\n'"], ["b'Solve 951557 - 949637 = -80*p for p.\\n'", "b'-24\\n'"], ["b'Solve 3868 + 3294 = -289*k - 2086 for k.\\n'", "b'-32\\n'"], ["b'Solve -64*q - 741 + 1038 - 1016 = 1393 for q.\\n'", "b'-33\\n'"], ["b'Solve -201*v + 677 + 99 + 387 = -244 for v.\\n'", "b'7\\n'"], ["b'Solve 682*w + 10879 = -399*w - 681*w - 45505 for w.\\n'", "b'-32\\n'"], ["b'Solve 760*w - 4706 = -545*w + 30978 + 29566 for w.\\n'", "b'50\\n'"], ["b'Solve -377*o + 12221 = 4743 - 10995 for o.\\n'", "b'49\\n'"], ["b'Solve -491*m + 5 - 13 = -6 - 2 for m.\\n'", "b'0\\n'"], ["b'Solve 0 = 1951*u - 20425 - 42007 for u.\\n'", "b'32\\n'"], ["b'Solve -2371*y - 41097 = -414*y for y.\\n'", "b'-21\\n'"], ["b'Solve 199*z + 848*z + 46068 = 0 for z.\\n'", "b'-44\\n'"], ["b'Solve 157*i - 147*i - 2 + 2 = -476*i for i.\\n'", "b'0\\n'"], ["b'Solve 92*j + 21*j + 855 = -1179 for j.\\n'", "b'-18\\n'"], ["b'Solve -627 = 318*j - 162*j - 175*j for j.\\n'", "b'33\\n'"], ["b'Solve 145144 = 60*o + 145564 for o.\\n'", "b'-7\\n'"], ["b'Solve 2862*d - 490 = 2932*d for d.\\n'", "b'-7\\n'"], ["b'Solve -30*w = 882 - 1212 for w.\\n'", "b'11\\n'"], ["b'Solve -73*x - 73*x + 5666 = 10338 for x.\\n'", "b'-32\\n'"], ["b'Solve 0 = -55*r - 874 - 870 + 1799 for r.\\n'", "b'1\\n'"], ["b'Solve -479*f - 37468 = 813*f for f.\\n'", "b'-29\\n'"], ["b'Solve -365 = 134*o + 258 - 87 for o.\\n'", "b'-4\\n'"], ["b'Solve 0 = 2209*d + 32379 + 7383 for d.\\n'", "b'-18\\n'"], ["b'Solve 15154 + 21033 = -1525*v + 1112 for v.\\n'", "b'-23\\n'"], ["b'Solve -858 + 13 = -542*b - 8975 for b.\\n'", "b'-15\\n'"], ["b'Solve -18387 = -108*n - 16119 for n.\\n'", "b'21\\n'"], ["b'Solve 183*z + 30266 = 24044 for z.\\n'", "b'-34\\n'"], ["b'Solve 682*w - 2572 = 19679 + 11849 for w.\\n'", "b'50\\n'"], ["b'Solve 41*u - 647 - 161 = -288 + 915 for u.\\n'", "b'35\\n'"], ["b'Solve 344*b - 2654 - 2107 = 7279 for b.\\n'", "b'35\\n'"], ["b'Solve 28857 + 20015 = 1400*r - 2928 for r.\\n'", "b'37\\n'"], ["b'Solve -284*z - 92 = -140*z - 469 - 55 for z.\\n'", "b'3\\n'"], ["b'Solve -598 = 498001*d - 497955*d for d.\\n'", "b'-13\\n'"], ["b'Solve 0 = 636*q + 3548 + 7900 for q.\\n'", "b'-18\\n'"], ["b'Solve 74*g + 310*g - 18534 - 12896 = -514*g for g.\\n'", "b'35\\n'"], ["b'Solve 15*t + 228 = 21*t for t.\\n'", "b'38\\n'"], ["b'Solve 89175 = 163*k + 86404 for k.\\n'", "b'17\\n'"], ["b'Solve -40261 = -1209*o + 18980 for o.\\n'", "b'49\\n'"], ["b'Solve -437 = 177*i + 1249 + 615 for i.\\n'", "b'-13\\n'"], ["b'Solve 197*j + 204*j - 2723 = 2089 for j.\\n'", "b'12\\n'"], ["b'Solve -238*w + 761 = -4305 - 3978 for w.\\n'", "b'38\\n'"], ["b'Solve 79*s = 37*s - 38*s - 3249 + 849 for s.\\n'", "b'-30\\n'"], ["b'Solve 0 = -655*c - 2 - 588 - 65 for c.\\n'", "b'-1\\n'"], ["b'Solve -46818*i + 46914*i = 3360 for i.\\n'", "b'35\\n'"], ["b'Solve -1051*b - 6305 = -241*b - 13790 - 10335 for b.\\n'", "b'22\\n'"], ["b'Solve 1726*t - 4417 + 6829 = 1086*t - 6548 for t.\\n'", "b'-14\\n'"], ["b'Solve -9*s - 126 - 132 = -17*s + 14 for s.\\n'", "b'34\\n'"], ["b'Solve 39760 = -2301*n - 26969 for n.\\n'", "b'-29\\n'"], ["b'Solve -99*u + 134064 = 138123 for u.\\n'", "b'-41\\n'"], ["b'Solve -254*c - 20326 = 288*c + 15438 - 8664 for c.\\n'", "b'-50\\n'"], ["b'Solve 151 - 1 - 17 = -133*t for t.\\n'", "b'-1\\n'"], ["b'Solve -1822*b - 52078 + 3660 = 3397 + 8311 for b.\\n'", "b'-33\\n'"], ["b'Solve 344 = -20*i + 86*i + 2060 for i.\\n'", "b'-26\\n'"], ["b'Solve -2*r - 27 = 5*r - 6*r - 10*r for r.\\n'", "b'3\\n'"], ["b'Solve -1515311 = 22*w - 1516125 for w.\\n'", "b'37\\n'"], ["b'Solve -705 + 3557 = -124*t for t.\\n'", "b'-23\\n'"], ["b'Solve -377*v - 5363 - 2177 = 0 for v.\\n'", "b'-20\\n'"], ["b'Solve -49005 = -381*j - 1227*j + 472*j - 679*j for j.\\n'", "b'27\\n'"], ["b'Solve 25*c - 34*c + 2647 = 94*c - 31 for c.\\n'", "b'26\\n'"], ["b'Solve 32*o + 39*o - 2215 + 604 = 306 for o.\\n'", "b'27\\n'"], ["b'Solve 2056*m + 30674 + 2286 = 3086*m for m.\\n'", "b'32\\n'"], ["b'Solve -3516 + 2034 = 451*q + 11980 + 7284 for q.\\n'", "b'-46\\n'"], ["b'Solve 0 = -938*j + 1891*j - 922*j + 713 for j.\\n'", "b'-23\\n'"], ["b'Solve -17808 = -84*i - 71*i - 69*i - 147*i for i.\\n'", "b'48\\n'"], ["b'Solve -1534*g - 1316*g + 42916 = -59684 for g.\\n'", "b'36\\n'"], ["b'Solve 0 = 53*k + 2401360 - 2402049 for k.\\n'", "b'13\\n'"], ["b'Solve 57178*t - 57212*t - 544 = 0 for t.\\n'", "b'-16\\n'"], ["b'Solve 8*v = 174 + 2 + 180 + 4 for v.\\n'", "b'45\\n'"], ["b'Solve -4*v - 6*v - 4*v - 48 = -12*v for v.\\n'", "b'-24\\n'"], ["b'Solve 122*b - 1010 = -77*b + 3167 + 1196 for b.\\n'", "b'27\\n'"], ["b'Solve 1005 = -18*x - 62*x - 105 - 2490 for x.\\n'", "b'-45\\n'"], ["b'Solve -4292 = 22*h - 772*h - 17792 for h.\\n'", "b'-18\\n'"], ["b'Solve 3652 = -398*x + 17*x + 985 for x.\\n'", "b'-7\\n'"], ["b'Solve 227*p + 9167 = -140 for p.\\n'", "b'-41\\n'"], ["b'Solve -28*s - 22*s = -265*s + 3225 for s.\\n'", "b'15\\n'"], ["b'Solve 520*h - 18414 = 143*h - 460*h for h.\\n'", "b'22\\n'"], ["b'Solve -412*d + 63*d = -31*d + 318 for d.\\n'", "b'-1\\n'"], ["b'Solve -648*g - 29885 = 47*g for g.\\n'", "b'-43\\n'"], ["b'Solve 3031*k + 90707 + 37814 = 25467 for k.\\n'", "b'-34\\n'"], ["b'Solve 1655 - 926 + 854 = 200*f - 5217 for f.\\n'", "b'34\\n'"], ["b'Solve -3562*y = 25680 + 38436 for y.\\n'", "b'-18\\n'"], ["b'Solve 0 = 64*c - 219942 + 217254 for c.\\n'", "b'42\\n'"], ["b'Solve -61*d + 105 + 114 = 14*d + 1419 for d.\\n'", "b'-16\\n'"], ["b'Solve -1506*c - 9001 = 4553 for c.\\n'", "b'-9\\n'"], ["b'Solve 193171*k = 193082*k + 890 for k.\\n'", "b'10\\n'"], ["b'Solve 160*q + 3952 = -131*q - 128*q + 267*q for q.\\n'", "b'-26\\n'"], ["b'Solve 2120 = 49*q - 48*q - 54*q for q.\\n'", "b'-40\\n'"], ["b'Solve -6832 - 134 = -162*p for p.\\n'", "b'43\\n'"], ["b'Solve 516*j - 203*j + 28600 = -54*j - 283*j for j.\\n'", "b'-44\\n'"], ["b'Solve 0 = 642*h - 1756 + 6250 for h.\\n'", "b'-7\\n'"], ["b'Solve 0 = 3262*j + 25581 - 6009 for j.\\n'", "b'-6\\n'"], ["b'Solve 6*x + 51*x + 4950 = -29*x - 24*x for x.\\n'", "b'-45\\n'"], ["b'Solve 101*j - 10*j = -182 for j.\\n'", "b'-2\\n'"], ["b'Solve -793*n + 2253*n + 11567 = -1966*n - 74083 for n.\\n'", "b'-25\\n'"], ["b'Solve -28317 + 8427 = -1054*w + 3353*w - 102654 for w.\\n'", "b'36\\n'"], ["b'Solve -29131 = -1707*r + 32813 + 39257 - 22679 for r.\\n'", "b'46\\n'"], ["b'Solve 18*h + 11947 = 11209 for h.\\n'", "b'-41\\n'"], ["b'Solve -1001 = -29239*n + 29162*n for n.\\n'", "b'13\\n'"], ["b'Solve 109*n - 137*n + 192*n = 2132 for n.\\n'", "b'13\\n'"], ["b'Solve 1159*o + 153 = -8635 - 36133 + 879 for o.\\n'", "b'-38\\n'"], ["b'Solve 0 = -94*f - 130*f - 40*f - 6336 for f.\\n'", "b'-24\\n'"], ["b'Solve 109*r + 107*r - 283*r = 670 for r.\\n'", "b'-10\\n'"], ["b'Solve 2761*y + 9875 = 3061*y - 5125 for y.\\n'", "b'50\\n'"], ["b'Solve 63*c + 506 = -1006 for c.\\n'", "b'-24\\n'"], ["b'Solve -19642*a = -19251*a + 5865 for a.\\n'", "b'-15\\n'"], ["b'Solve 1363*l = 1470*l + 1819 for l.\\n'", "b'-17\\n'"], ["b'Solve 26333 - 2167 = -993*d + 257*d - 1594 for d.\\n'", "b'-35\\n'"], ["b'Solve 60*a + 54 = 318*a - 94*a - 110*a for a.\\n'", "b'1\\n'"], ["b'Solve 646453 - 647137 = 18*j for j.\\n'", "b'-38\\n'"], ["b'Solve 12*r + 55 = -0 - 5 for r.\\n'", "b'-5\\n'"], ["b'Solve -564*q + 7241 + 16311 = 5504 for q.\\n'", "b'32\\n'"], ["b'Solve 213*f = 169*f - 1137 - 51 for f.\\n'", "b'-27\\n'"], ["b'Solve 109*q + 15*q + 1594 = -115*q - 3186 for q.\\n'", "b'-20\\n'"], ["b'Solve 9*d - 4706 = 288*d + 83*d for d.\\n'", "b'-13\\n'"], ["b'Solve 301*l - 105186 = -111808 for l.\\n'", "b'-22\\n'"], ["b'Solve -38*o - 144*o - 755 - 7974 = 21*o for o.\\n'", "b'-43\\n'"], ["b'Solve 2841*b = 3013*b + 3612 for b.\\n'", "b'-21\\n'"], ["b'Solve -3139 = 383*u - 6576 - 4463 - 1292 for u.\\n'", "b'24\\n'"], ["b'Solve i + 298140 = 298142 for i.\\n'", "b'2\\n'"], ["b'Solve -28*f - 16*f = -9*f + 38*f + 511 for f.\\n'", "b'-7\\n'"], ["b'Solve -1099*w = 1353*w - 73019 - 22609 for w.\\n'", "b'39\\n'"], ["b'Solve -8984 = 283*c - 44*c + 115 - 973 for c.\\n'", "b'-34\\n'"], ["b'Solve -158 + 1147 = 107*w - 295 for w.\\n'", "b'12\\n'"], ["b'Solve 3*u + 19 = -163 + 38 for u.\\n'", "b'-48\\n'"], ["b'Solve 807*k - 179*k + 2470 = -607*k for k.\\n'", "b'-2\\n'"], ["b'Solve -1237*u + 1400 = -3548 for u.\\n'", "b'4\\n'"], ["b'Solve 0 = 916*r - 141*r + 27125 for r.\\n'", "b'-35\\n'"], ["b'Solve 2026 - 12616 = 706*q for q.\\n'", "b'-15\\n'"], ["b'Solve -67*c + 2528 - 13244 - 379 = -384*c for c.\\n'", "b'35\\n'"], ["b'Solve 10384 = 129*i - 61*i + 22*i + 146*i for i.\\n'", "b'44\\n'"], ["b'Solve -239*w - 106*w = -1513 - 3188 - 129 for w.\\n'", "b'14\\n'"], ["b'Solve -87*h + 37*h + 3480 = 98*h + 26*h for h.\\n'", "b'20\\n'"], ["b'Solve -117*p = 1047*p for p.\\n'", "b'0\\n'"], ["b'Solve 159*w - 4091 = 2061 + 3735 - 2891 for w.\\n'", "b'44\\n'"], ["b'Solve -37*d + 342 = -277 - 565 for d.\\n'", "b'32\\n'"], ["b'Solve 685*g - 618 + 511 = 4354 + 3074 for g.\\n'", "b'11\\n'"], ["b'Solve 0 = 1879*w + 11782 + 63378 for w.\\n'", "b'-40\\n'"], ["b'Solve 32684 + 3387 - 1859 = -1941*s - 12372 for s.\\n'", "b'-24\\n'"], ["b'Solve -10384 = 538*r + 8446 for r.\\n'", "b'-35\\n'"], ["b'Solve 0 = 70*k + 132 + 4 + 64 + 10 for k.\\n'", "b'-3\\n'"], ["b'Solve 443*f - 158*f - 179*f - 7152 = -490*f for f.\\n'", "b'12\\n'"], ["b'Solve -339*t + 16164 = 140*t - 30*t for t.\\n'", "b'36\\n'"], ["b'Solve 38*u - 57*u - 248 = 10*u + 95*u for u.\\n'", "b'-2\\n'"], ["b'Solve 628*v - 6735 + 46476 = -391*v for v.\\n'", "b'-39\\n'"], ["b'Solve 1518*t - 21287 + 17010 = 19563 + 26254 for t.\\n'", "b'33\\n'"], ["b'Solve -108*u - 99*u + 271*u - 279 = 95*u for u.\\n'", "b'-9\\n'"], ["b'Solve -3425*m + 37889 = -3211 for m.\\n'", "b'12\\n'"], ["b'Solve 3792*i = 1273*i + 1255*i + 1339*i + 750 for i.\\n'", "b'-10\\n'"], ["b'Solve -2346 = -20564*t + 20615*t for t.\\n'", "b'-46\\n'"], ["b'Solve 10*p - 187 = -326 - 221 for p.\\n'", "b'-36\\n'"], ["b'Solve 1711*q + 876*q = 154 - 44133 for q.\\n'", "b'-17\\n'"], ["b'Solve -2822*m + 11219 = -183*m + 371*m - 39951 for m.\\n'", "b'17\\n'"], ["b'Solve 4547 = -166*x + 8863 for x.\\n'", "b'26\\n'"], ["b'Solve 2102398*m = 2102374*m + 528 for m.\\n'", "b'22\\n'"], ["b'Solve -81*i - 727 + 464 + 1400 + 888 = 0 for i.\\n'", "b'25\\n'"], ["b'Solve 1084*x - 105952 = -2181*x + 176*x - 222*x for x.\\n'", "b'32\\n'"], ["b'Solve -2019 + 4350 = 111*s for s.\\n'", "b'21\\n'"], ["b'Solve 0 = 26*r - 666867 + 667621 for r.\\n'", "b'-29\\n'"], ["b'Solve 394*z - 53*z + 14322 = 0 for z.\\n'", "b'-42\\n'"], ["b'Solve -149*b - 38*b = -25*b - 11*b + 1812 for b.\\n'", "b'-12\\n'"], ["b'Solve 48983 = -301*a + 37846 for a.\\n'", "b'-37\\n'"], ["b'Solve 0 = 4*j + 52 - 19 + 71 for j.\\n'", "b'-26\\n'"], ["b'Solve 1927*l + 47364 + 55727 + 12372 - 36456 = 0 for l.\\n'", "b'-41\\n'"], ["b'Solve 12*m - 1498 + 7438 = -92*m - 193*m for m.\\n'", "b'-20\\n'"], ["b'Solve -2258*u - 5484 = -5341*u + 74674 for u.\\n'", "b'26\\n'"], ["b'Solve -450 = 189*v - 54*v - 173 + 128 for v.\\n'", "b'-3\\n'"], ["b'Solve -21714 = -1208*n + 22982 for n.\\n'", "b'37\\n'"], ["b'Solve -26*m - 119*m - 12*m = 56*m + 7881 for m.\\n'", "b'-37\\n'"], ["b'Solve 69*q + 363 + 2676 - 555 = 0 for q.\\n'", "b'-36\\n'"], ["b'Solve -135*d - 126 = 33*d - 798 for d.\\n'", "b'4\\n'"], ["b'Solve 372*o - 2309*o - 81780 = -197*o for o.\\n'", "b'-47\\n'"], ["b'Solve 17743 = 30*u - 17935 + 34928 for u.\\n'", "b'25\\n'"], ["b'Solve -645*c + 615*c + 763 = -407 for c.\\n'", "b'39\\n'"], ["b'Solve 312 + 314 + 78 = -11*c + 154 for c.\\n'", "b'-50\\n'"], ["b'Solve -69*c + 187 + 2918 = 0 for c.\\n'", "b'45\\n'"], ["b'Solve 5*i + 37 = 56 - 14 for i.\\n'", "b'1\\n'"], ["b'Solve -5*t + 34*t + 451 = -43*t - 2645 for t.\\n'", "b'-43\\n'"], ["b'Solve -1044*b - 1402*b + 41865 = -863*b + 1208*b for b.\\n'", "b'15\\n'"], ["b'Solve 6*h = 49*h - 280*h + 6180 - 1440 for h.\\n'", "b'20\\n'"], ["b'Solve k + 29*k = 3*k - 2*k - 25*k for k.\\n'", "b'0\\n'"], ["b'Solve 69*v + 33*v - 169*v + 3283 = 0 for v.\\n'", "b'49\\n'"], ["b'Solve 87*j - 1245 = -48*j - 435 for j.\\n'", "b'6\\n'"], ["b'Solve -292*b = 6180 - 12580 - 7616 for b.\\n'", "b'48\\n'"], ["b'Solve -36*k - 75*k - 1472 = -47*k for k.\\n'", "b'-23\\n'"], ["b'Solve -1443*q + 2096*q + 18284 = 0 for q.\\n'", "b'-28\\n'"], ["b'Solve -340*f + 29*f + 1270 + 2462 = 0 for f.\\n'", "b'12\\n'"], ["b'Solve 1325*i - 48800 = 10825 for i.\\n'", "b'45\\n'"], ["b'Solve 0 = -23*m - 1806 + 771 for m.\\n'", "b'-45\\n'"], ["b'Solve 28302*q - 28461*q - 1113 = 0 for q.\\n'", "b'-7\\n'"], ["b'Solve -2164*y = 12107 + 15616 + 26377 for y.\\n'", "b'-25\\n'"], ["b'Solve 62*p - 903 - 733 + 304 = -12*p for p.\\n'", "b'18\\n'"], ["b'Solve 14*n + 5 - 30 = -42 - 137 for n.\\n'", "b'-11\\n'"], ["b'Solve 349*o - 2887 = -5343 - 14296 for o.\\n'", "b'-48\\n'"], ["b'Solve 580079*o + 208 = 580066*o for o.\\n'", "b'-16\\n'"], ["b'Solve 360*v - 10485 = -4365 for v.\\n'", "b'17\\n'"], ["b'Solve 274*h + 140*h = -198*h - 4896 for h.\\n'", "b'-8\\n'"], ["b'Solve -4867*c + 731*c = 28133 + 87675 for c.\\n'", "b'-28\\n'"], ["b'Solve -688*u - 3029 = -921*u for u.\\n'", "b'13\\n'"], ["b'Solve -875*n - 4451 - 30411 - 7134 = 1754 for n.\\n'", "b'-50\\n'"], ["b'Solve -818*k - 25588 = 518*k + 5140 for k.\\n'", "b'-23\\n'"], ["b'Solve 291*g + 1792 + 5345 - 1030 = -4660 for g.\\n'", "b'-37\\n'"], ["b'Solve -6*s = -31*s - 728*s + 7075 + 14009 for s.\\n'", "b'28\\n'"], ["b'Solve -15679*a = -16744*a - 45795 for a.\\n'", "b'-43\\n'"], ["b'Solve -90754 + 91783 = 147*q for q.\\n'", "b'7\\n'"], ["b'Solve 142*y - 70332 = -74166 for y.\\n'", "b'-27\\n'"], ["b'Solve 11*f = -38*f + 19*f + 240 for f.\\n'", "b'8\\n'"], ["b'Solve 102*i = -59*i + 16*i - 1429 + 5634 for i.\\n'", "b'29\\n'"], ["b'Solve 39024 = 1850*y + 318*y for y.\\n'", "b'18\\n'"], ["b'Solve -2760*q + 2841*q + 2187 = 0 for q.\\n'", "b'-27\\n'"], ["b'Solve 0 = -10872*n + 11663*n - 791 for n.\\n'", "b'1\\n'"], ["b'Solve 96*p - 577*p - 113*p = 4158 for p.\\n'", "b'-7\\n'"], ["b'Solve 11*i - 694 = -47*i - 174*i + 8122 for i.\\n'", "b'38\\n'"], ["b'Solve 3162 = 237*i + 64*i - 115*i for i.\\n'", "b'17\\n'"], ["b'Solve -2028*a - 13552 = -1181*a for a.\\n'", "b'-16\\n'"], ["b'Solve 462*n + 6310 = -732*n - 13988 for n.\\n'", "b'-17\\n'"], ["b'Solve -94*s - 23 = 252*s - 369 for s.\\n'", "b'1\\n'"], ["b'Solve -89*x - 326 - 1721 = 0 for x.\\n'", "b'-23\\n'"], ["b'Solve 2*i + 525 = -52*i - 5*i + 643 for i.\\n'", "b'2\\n'"], ["b'Solve 144*c - 32250 = 789*c for c.\\n'", "b'-50\\n'"], ["b'Solve 41*r = -87*r - 49*r + 56*r + 1452 for r.\\n'", "b'12\\n'"], ["b'Solve -103*p + 9205 = 7*p + 111*p + 42*p for p.\\n'", "b'35\\n'"], ["b'Solve 0 = 63*l + 7190 - 7694 for l.\\n'", "b'8\\n'"], ["b'Solve -922*b - 6405 = -1227*b for b.\\n'", "b'21\\n'"], ["b'Solve 300*s + 1098 = 3198 for s.\\n'", "b'7\\n'"], ["b'Solve -7187 + 14065 = 181*z for z.\\n'", "b'38\\n'"], ["b'Solve 4626 + 966 = -172*m - 2492 for m.\\n'", "b'-47\\n'"], ["b'Solve -36*r + 5917 - 1509 + 1020 = 200*r for r.\\n'", "b'23\\n'"], ["b'Solve 190*i - 298 = -28 + 300 for i.\\n'", "b'3\\n'"], ["b'Solve -1711*p + 520 + 1435 = -1626*p for p.\\n'", "b'23\\n'"], ["b'Solve 27*f = 5014357 - 5013763 for f.\\n'", "b'22\\n'"], ["b'Solve 19*k = 100455 - 100246 for k.\\n'", "b'11\\n'"], ["b'Solve -5059 = -63*t - 6067 for t.\\n'", "b'-16\\n'"], ["b'Solve 643*o - 1228 - 6829 = 23450 for o.\\n'", "b'49\\n'"], ["b'Solve 98*m = 26*m - 27*m - 140*m - 11233 for m.\\n'", "b'-47\\n'"], ["b'Solve -238*f + 532*f + 512*f + 6436 = -5654 for f.\\n'", "b'-15\\n'"], ["b'Solve -16*o + 184 - 497 - 297 = -18 for o.\\n'", "b'-37\\n'"], ["b'Solve 2278 = 72*y + 94*y - 99*y for y.\\n'", "b'34\\n'"], ["b'Solve -78*u + 57*u + 2615 = 81*u - 1363 for u.\\n'", "b'39\\n'"], ["b'Solve -82*x - 36*x = 38*x + 45*x + 1206 for x.\\n'", "b'-6\\n'"], ["b'Solve 133*j = 139*j + 639*j - 13189 - 5516 for j.\\n'", "b'29\\n'"], ["b'Solve 823*p - 580*p = 511*p + 2642*p + 14550 for p.\\n'", "b'-5\\n'"], ["b'Solve 0 = -202*w + 192703 - 201995 for w.\\n'", "b'-46\\n'"], ["b'Solve 159*o = 148878 - 149037 for o.\\n'", "b'-1\\n'"], ["b'Solve 1112*r + 1418*r - 5220 = 587*r - 28536 for r.\\n'", "b'-12\\n'"], ["b'Solve 21*y + y + 2596 = -42*y + 292 for y.\\n'", "b'-36\\n'"], ["b'Solve 35*b - 4899 = -3219 for b.\\n'", "b'48\\n'"], ["b'Solve 891*v - 8688 = -109*v - 41688 for v.\\n'", "b'-33\\n'"], ["b'Solve -11*c + 2*c + 18*c - 777 = -28*c for c.\\n'", "b'21\\n'"], ["b'Solve 3*o - 184 + 1371 - 83 = 26*o for o.\\n'", "b'48\\n'"], ["b'Solve -24*g - 23*g = -8*g + 12*g + 1581 for g.\\n'", "b'-31\\n'"], ["b'Solve -319 = -250*a + 1039 - 5255 - 1603 for a.\\n'", "b'-22\\n'"], ["b'Solve 1857*c - 249*c = -1144*c + 22016 for c.\\n'", "b'8\\n'"], ["b'Solve 242*q + 3473 = 24*q - 37*q - 7747 for q.\\n'", "b'-44\\n'"], ["b'Solve -30*b = -736*b - 579*b + 16934 + 28041 for b.\\n'", "b'35\\n'"], ["b'Solve 3054*o - 2708*o + 10034 = 0 for o.\\n'", "b'-29\\n'"], ["b'Solve 815*m = -349*m - 1102*m - 49852 for m.\\n'", "b'-22\\n'"], ["b'Solve -53*f - 605 - 214 = -24 for f.\\n'", "b'-15\\n'"], ["b'Solve -458*r + 2435 - 2727 = 56*r + 7932 for r.\\n'", "b'-16\\n'"], ["b'Solve -1076*r - 1963 = 15517 + 9420 for r.\\n'", "b'-25\\n'"], ["b'Solve 1114*o = 598*o - 17028 for o.\\n'", "b'-33\\n'"], ["b'Solve -291*i - 42886 + 37939 = 0 for i.\\n'", "b'-17\\n'"], ["b'Solve -508*d - 398*d - 57*d = 44298 for d.\\n'", "b'-46\\n'"], ["b'Solve 4*p - 46*p - 1553 + 313 = 20*p for p.\\n'", "b'-20\\n'"], ["b'Solve 0 = -129*g + 2866 - 1963 for g.\\n'", "b'7\\n'"], ["b'Solve 716 - 352 = -91*g for g.\\n'", "b'-4\\n'"], ["b'Solve 444*y - 74*y = 1480 for y.\\n'", "b'4\\n'"], ["b'Solve 33*n + 124*n = -58*n + 29*n - 7998 for n.\\n'", "b'-43\\n'"], ["b'Solve -33691 = 250*o - 35191 for o.\\n'", "b'6\\n'"], ["b'Solve -24*v + 2177 + 2425 = 94*v - 708 for v.\\n'", "b'45\\n'"], ["b'Solve -144052*j - 41 = -144053*j for j.\\n'", "b'41\\n'"], ["b'Solve -814*f + 4306 = 322*f - 1949 - 13057 for f.\\n'", "b'17\\n'"], ["b'Solve -17*z - 144*z - 8029 = -29*z + 127*z for z.\\n'", "b'-31\\n'"], ["b'Solve 1937 = -115*s + 2742 for s.\\n'", "b'7\\n'"], ["b'Solve 286*s + 2537 + 3007 = -110*s for s.\\n'", "b'-14\\n'"], ["b'Solve -11*c = -5*c + 15*c + 144 + 423 for c.\\n'", "b'-27\\n'"], ["b'Solve -3*c + 630 = -4*c - 0*c - 17*c for c.\\n'", "b'-35\\n'"], ["b'Solve 218*w - 1933 = 607*w + 940 + 3351 for w.\\n'", "b'-16\\n'"], ["b'Solve 3640*f - 3616*f - 72 = 0 for f.\\n'", "b'3\\n'"], ["b'Solve 9542 = 443*m - 76*m for m.\\n'", "b'26\\n'"], ["b'Solve 170*c + 587*c + 7 = 13 - 6 for c.\\n'", "b'0\\n'"], ["b'Solve -195269*v = -195273*v + 4 for v.\\n'", "b'1\\n'"], ["b'Solve -1008*z - 604*z + 164*z + 20704 = -154*z for z.\\n'", "b'16\\n'"], ["b'Solve -41*q - 561*q + 1892 + 6626 = -2920 for q.\\n'", "b'19\\n'"], ["b'Solve 1110*t = 9230 + 5200 for t.\\n'", "b'13\\n'"], ["b'Solve -3180*y = -2879*y - 15050 for y.\\n'", "b'50\\n'"], ["b'Solve -142*q + 3*q - 2502 = 0 for q.\\n'", "b'-18\\n'"], ["b'Solve -1991 - 717 - 9202 = -1191*z for z.\\n'", "b'10\\n'"], ["b'Solve 1042372*g - 1042308*g = 1408 for g.\\n'", "b'22\\n'"], ["b'Solve 1212 = -258*m + 212 - 806 for m.\\n'", "b'-7\\n'"], ["b'Solve -6845*s - 6819*s + 13708*s + 1364 = 0 for s.\\n'", "b'-31\\n'"], ["b'Solve -34054 = -1486*o + 28358 for o.\\n'", "b'42\\n'"], ["b'Solve 48 - 39 = -49*f + 12*f - 65 for f.\\n'", "b'-2\\n'"], ["b'Solve -3603*i + 4137*i = -534 for i.\\n'", "b'-1\\n'"], ["b'Solve 1428*g - 47236 = 464*g for g.\\n'", "b'49\\n'"], ["b'Solve -513*i + 1238*i = 16888 - 213 for i.\\n'", "b'23\\n'"], ["b'Solve -428*r - 24172 - 7370 - 17717 = 1161*r for r.\\n'", "b'-31\\n'"], ["b'Solve -5431*g + 5072*g + 8975 = 0 for g.\\n'", "b'25\\n'"], ["b'Solve -38*n + 55*n - 34*n + 391 = 0 for n.\\n'", "b'23\\n'"], ["b'Solve 6068*h + 1717 = 5986*h + 323 for h.\\n'", "b'-17\\n'"], ["b'Solve 178227*j = 178142*j + 935 for j.\\n'", "b'11\\n'"], ["b'Solve 2551 = -95661*d + 95600*d - 11 for d.\\n'", "b'-42\\n'"], ["b'Solve -1130*y + 226*y = 9533 + 12163 for y.\\n'", "b'-24\\n'"], ["b'Solve -5881*k = -5991*k - 4840 for k.\\n'", "b'-44\\n'"], ["b'Solve -2754*h + 576 = -2690*h for h.\\n'", "b'9\\n'"], ["b'Solve 206*d - 12169 - 9389 - 18909 = 1193*d for d.\\n'", "b'-41\\n'"], ["b'Solve 21*q - 44*q - 2528 = -7*q + 63*q for q.\\n'", "b'-32\\n'"], ["b'Solve -86 - 85 = -46*n + 235 - 130 for n.\\n'", "b'6\\n'"], ["b'Solve -1510*f = 700*f - 59670 for f.\\n'", "b'27\\n'"], ["b'Solve -17*t + 35*t = -2*t - 48*t - 136 for t.\\n'", "b'-2\\n'"], ["b'Solve 40*z + 385 - 686 = 379 for z.\\n'", "b'17\\n'"], ["b'Solve -4845*v = -976*v + 139284 for v.\\n'", "b'-36\\n'"], ["b'Solve 2075*f + 121251 - 40326 = 0 for f.\\n'", "b'-39\\n'"], ["b'Solve 87*j - 1245 = -48*j - 435 for j.\\n'", "b'6\\n'"], ["b'Solve 0 = -65*b + 7*b + 32180 - 33804 for b.\\n'", "b'-28\\n'"], ["b'Solve 5302 = 1442*n - 13444 for n.\\n'", "b'13\\n'"], ["b'Solve -32146 + 27358 = 114*k for k.\\n'", "b'-42\\n'"], ["b'Solve -5051*z + 4575*z - 11424 = 0 for z.\\n'", "b'-24\\n'"], ["b'Solve 443*f - 158*f - 179*f - 7152 = -490*f for f.\\n'", "b'12\\n'"], ["b'Solve 0 = 199*d - 2770 - 353 - 3046 for d.\\n'", "b'31\\n'"], ["b'Solve -220679 + 218649 = -58*y for y.\\n'", "b'35\\n'"], ["b'Solve -43*q + 150 + 525 + 959 = 0 for q.\\n'", "b'38\\n'"], ["b'Solve 2878*l = 1509*l - 2732*l - 40609 - 78320 for l.\\n'", "b'-29\\n'"], ["b'Solve 4*r = 135*r - 83 - 48 for r.\\n'", "b'1\\n'"], ["b'Solve 8088*o - 8311*o = 3345 for o.\\n'", "b'-15\\n'"], ["b'Solve 3*d + 3*d - 3003 = -20*d - 2431 for d.\\n'", "b'22\\n'"], ["b'Solve -65*b - 369*b = -712 + 1513 + 935 for b.\\n'", "b'-4\\n'"], ["b'Solve -238*f + 532*f + 512*f + 6436 = -5654 for f.\\n'", "b'-15\\n'"], ["b'Solve 6609 = 265*x + 249 for x.\\n'", "b'24\\n'"], ["b'Solve 3405*c - 81394 + 2565 = 57371 for c.\\n'", "b'40\\n'"], ["b'Solve -1537801*x + 1449 = -1537732*x for x.\\n'", "b'21\\n'"], ["b'Solve 809*f - 9177 = 1292*f for f.\\n'", "b'-19\\n'"], ["b'Solve 1123 + 1404 = -1129*a - 1989 for a.\\n'", "b'-4\\n'"], ["b'Solve 47132 = 4*t + 46988 for t.\\n'", "b'36\\n'"], ["b'Solve -5914*o + 2932*o - 630 = -2912*o for o.\\n'", "b'-9\\n'"], ["b'Solve -50*j + 41*j = 79*j + 92*j - 3240 for j.\\n'", "b'18\\n'"], ["b'Solve -743*m - 12055 - 29023 = -2697 - 1231 for m.\\n'", "b'-50\\n'"], ["b'Solve 3299 = -198*o + 8344 + 4657 for o.\\n'", "b'49\\n'"], ["b'Solve 25720 + 4876 = 723*u + 4568 for u.\\n'", "b'36\\n'"], ["b'Solve 220*c + 72*c + 11447 = -250*c - 3729 for c.\\n'", "b'-28\\n'"], ["b'Solve -2525 = 55*c - 154*c - 411 + 1054 for c.\\n'", "b'32\\n'"], ["b'Solve 660*h + 67*h = -245*h - 138 + 1110 for h.\\n'", "b'1\\n'"], ["b'Solve 213*f + 67*f = -5952 - 3331 + 603 for f.\\n'", "b'-31\\n'"], ["b'Solve 315558*u + 51 = 315541*u for u.\\n'", "b'-3\\n'"], ["b'Solve -163493*q = -163518*q + 1150 for q.\\n'", "b'46\\n'"], ["b'Solve 1116*k + 25944 + 4331 = -95*k for k.\\n'", "b'-25\\n'"], ["b'Solve -409*j - 790*j - 2040 = 358 for j.\\n'", "b'-2\\n'"], ["b'Solve 38*v + 23*v - 2352 = 149*v + 728 for v.\\n'", "b'-35\\n'"], ["b'Solve 366*w + 524*w - 23140 = 0 for w.\\n'", "b'26\\n'"], ["b'Solve 83*r - 1272 + 2165 = -97 - 2579 for r.\\n'", "b'-43\\n'"], ["b'Solve -1292979*n = -1293042*n - 1764 for n.\\n'", "b'-28\\n'"], ["b'Solve 1113*l + 1238*l - 579*l = 17909 + 37023 for l.\\n'", "b'31\\n'"], ["b'Solve 0 = -1515*h + 4044*h - 26124 - 9282 for h.\\n'", "b'14\\n'"], ["b'Solve -39*u - 63*u - 42*u + 1152 = 0 for u.\\n'", "b'8\\n'"], ["b'Solve -21*p - 4*p - 5848 = 147*p for p.\\n'", "b'-34\\n'"], ["b'Solve -231*n = 428*n - 35*n + 22464 for n.\\n'", "b'-36\\n'"], ["b'Solve 70885 = -1061*g + 18896 for g.\\n'", "b'-49\\n'"], ["b'Solve 856840 = -54*o + 856138 for o.\\n'", "b'-13\\n'"], ["b'Solve -46*j = 299191 - 299835 for j.\\n'", "b'14\\n'"], ["b'Solve 298*c - 511*c + 35700 = -807*c - 834*c for c.\\n'", "b'-25\\n'"], ["b'Solve -175 = 4768*k - 4775*k for k.\\n'", "b'25\\n'"], ["b'Solve -30*o + 7239 = -1587*o + 36*o + 75684 for o.\\n'", "b'45\\n'"], ["b'Solve 816*z = 472*z - 5848 for z.\\n'", "b'-17\\n'"], ["b'Solve 407*c - 797*c = -338*c + 1872 for c.\\n'", "b'-36\\n'"], ["b'Solve 0 = 301*d - 313 + 2860 + 10245 - 752 for d.\\n'", "b'-40\\n'"], ["b'Solve -5963*o = -3007*o - 3001*o for o.\\n'", "b'0\\n'"], ["b'Solve 12*l + 8*l + 20 - 165 = -5 for l.\\n'", "b'7\\n'"], ["b'Solve 0 = -1665*r + 307*r + 29876 for r.\\n'", "b'22\\n'"], ["b'Solve -268*a + 1601 = -811 for a.\\n'", "b'9\\n'"], ["b'Solve 1229*v + 225 = 40469 + 313 for v.\\n'", "b'33\\n'"], ["b'Solve 1133*f = -758*f - 192*f - 62490 for f.\\n'", "b'-30\\n'"], ["b'Solve 110*z + 29*z - 1215 + 5085 = 53*z for z.\\n'", "b'-45\\n'"], ["b'Solve 148*i - 1089 - 602 - 1019 = 102 for i.\\n'", "b'19\\n'"], ["b'Solve 63*c + 506 = -1006 for c.\\n'", "b'-24\\n'"], ["b'Solve -164*g - 9*g = -18*g + 37*g - 3072 for g.\\n'", "b'16\\n'"], ["b'Solve 29*h + 192*h + 85*h + 11139 = 69*h for h.\\n'", "b'-47\\n'"], ["b'Solve 4152 + 2295 = 113*r + 766 + 935 for r.\\n'", "b'42\\n'"], ["b'Solve 17917 - 31188 = 2080*d + 1254*d + 83415 for d.\\n'", "b'-29\\n'"], ["b'Solve 1644*h + 60765 = -1397*h + 905*h + 957 for h.\\n'", "b'-28\\n'"], ["b'Solve -73*x - 73*x + 5666 = 10338 for x.\\n'", "b'-32\\n'"], ["b'Solve -37*x - 491 = 416*x + 1452 + 4399 for x.\\n'", "b'-14\\n'"], ["b'Solve -560*z = -58*z + 1138 + 10910 for z.\\n'", "b'-24\\n'"], ["b'Solve -3*w - 1498 - 3626 = 119*w for w.\\n'", "b'-42\\n'"], ["b'Solve 282*o = 123*o - 384*o + 14118 for o.\\n'", "b'26\\n'"], ["b'Solve -2283 + 819 + 204 = 63*q for q.\\n'", "b'-20\\n'"], ["b'Solve 69*v + 33*v - 169*v + 3283 = 0 for v.\\n'", "b'49\\n'"], ["b'Solve -216 = -1047*d - 1093*d + 2086*d for d.\\n'", "b'4\\n'"], ["b'Solve 923 + 274 = 26*p - 77 + 234 for p.\\n'", "b'40\\n'"], ["b'Solve -6578*q - 1856 = 6671*q - 13185*q for q.\\n'", "b'-29\\n'"], ["b'Solve -675*u + 26384 = 101*u for u.\\n'", "b'34\\n'"], ["b'Solve -26697 = 1057*r - 493*r + 574*r + 22237 for r.\\n'", "b'-43\\n'"], ["b'Solve 15388 = 494*i - 14*i - 3589 - 2623 for i.\\n'", "b'45\\n'"], ["b'Solve 0 = 1568*u + 61641 + 10487 for u.\\n'", "b'-46\\n'"], ["b'Solve -7*s - 139147 = -139168 for s.\\n'", "b'3\\n'"], ["b'Solve -14*i - 1110 + 1656 = 0 for i.\\n'", "b'39\\n'"], ["b'Solve 11924 = -27136*z + 27407*z for z.\\n'", "b'44\\n'"], ["b'Solve -1282*j - 2258*j + 1015*j + 33174 = 1161*j for j.\\n'", "b'9\\n'"], ["b'Solve -38*m - 610 - 683 = -1521 for m.\\n'", "b'6\\n'"], ["b'Solve 0*g - 1520 = 13*g - 42*g - 11*g for g.\\n'", "b'38\\n'"], ["b'Solve -1724*y = -9903 + 1283 for y.\\n'", "b'5\\n'"], ["b'Solve -6670 = 3580*v - 3350*v for v.\\n'", "b'-29\\n'"], ["b'Solve -337*w = 438*w + 804*w - 17369 for w.\\n'", "b'11\\n'"], ["b'Solve -223352 = 3251*i - 77057 for i.\\n'", "b'-45\\n'"], ["b'Solve 0 = 953*z + 11172 - 37856 for z.\\n'", "b'28\\n'"], ["b'Solve 615 = 35*s + 20*s - 522 + 312 for s.\\n'", "b'15\\n'"], ["b'Solve -1545*o = 19436 - 78146 for o.\\n'", "b'38\\n'"], ["b'Solve -13*n + 503624 - 503228 = -49*n for n.\\n'", "b'-11\\n'"], ["b'Solve -206*n + 49*n + 1918 = -123 for n.\\n'", "b'13\\n'"], ["b'Solve 290241 - 292673 = -64*u for u.\\n'", "b'38\\n'"], ["b'Solve 1293 + 2 = 37*r for r.\\n'", "b'35\\n'"], ["b'Solve 19*v - 316 - 142 = 151 + 75 for v.\\n'", "b'36\\n'"], ["b'Solve 0 = 139*r + 433734 - 439294 for r.\\n'", "b'40\\n'"], ["b'Solve -126*r = 13593 - 19263 for r.\\n'", "b'45\\n'"], ["b'Solve 569*m + 6132 + 7284 = -10482 for m.\\n'", "b'-42\\n'"], ["b'Solve -377*o + 12221 = 4743 - 10995 for o.\\n'", "b'49\\n'"], ["b'Solve -47*k = 51*k - 130*k + 226*k - 4268 for k.\\n'", "b'22\\n'"], ["b'Solve 3350 = 682*g - 2537 + 873 - 2488 for g.\\n'", "b'11\\n'"], ["b'Solve 544*s + 13787 = -1914 - 3663 - 2396 for s.\\n'", "b'-40\\n'"], ["b'Solve 219*u + 12619 = -407*u - 5535 for u.\\n'", "b'-29\\n'"], ["b'Solve 49*a - 8433 = 17*a - 9521 for a.\\n'", "b'-34\\n'"], ["b'Solve -1207*l - 1096*l + 3648 = 42799 for l.\\n'", "b'-17\\n'"], ["b'Solve 30512*k = 30586*k for k.\\n'", "b'0\\n'"], ["b'Solve -65*f - 43*f - 75*f = -3710 - 1597 for f.\\n'", "b'29\\n'"], ["b'Solve -1672*s = -237*s - 7876 + 65276 for s.\\n'", "b'-40\\n'"], ["b'Solve 1654*k - 28636 = -2172 for k.\\n'", "b'16\\n'"], ["b'Solve -1071*c - 6528 = -935*c for c.\\n'", "b'-48\\n'"], ["b'Solve -11*c - 40*c + 766 - 88 + 903 = 0 for c.\\n'", "b'31\\n'"], ["b'Solve 168*k + 2035 = -1493 for k.\\n'", "b'-21\\n'"], ["b'Solve 109*m = -284*m - 7925 - 7402 for m.\\n'", "b'-39\\n'"], ["b'Solve 149*l - 4951 = -9570 for l.\\n'", "b'-31\\n'"], ["b'Solve 7705*l - 8892*l = 13057 for l.\\n'", "b'-11\\n'"], ["b'Solve -119*z + 12 - 424 = -14*z - 2*z for z.\\n'", "b'-4\\n'"], ["b'Solve -349*m + 1455*m - 21849 = -6365 for m.\\n'", "b'14\\n'"], ["b'Solve 590*q + 1616 = 426*q - 5764 for q.\\n'", "b'-45\\n'"], ["b'Solve 3*d + 3*d - 3003 = -20*d - 2431 for d.\\n'", "b'22\\n'"], ["b'Solve 35634 + 40310 = 1726*c for c.\\n'", "b'44\\n'"], ["b'Solve -1973*d = -1770*d - 6293 for d.\\n'", "b'31\\n'"], ["b'Solve -5797 = 1778*p - 7295 - 14859 - 8535 for p.\\n'", "b'14\\n'"], ["b'Solve -748*j + 39214 - 6302 = 0 for j.\\n'", "b'44\\n'"], ["b'Solve 78759*b + 50 = 78762*b - 10 for b.\\n'", "b'20\\n'"], ["b'Solve 20*r - 30*r = 71*r - 324 for r.\\n'", "b'4\\n'"], ["b'Solve 149*a + 21 + 31 - 77 = -25 for a.\\n'", "b'0\\n'"], ["b'Solve -u + 2*u = -14*u + 57*u - 1218 for u.\\n'", "b'29\\n'"], ["b'Solve -238 = -149455*u + 149462*u for u.\\n'", "b'-34\\n'"], ["b'Solve -1780 + 527 = 94*y - 273*y for y.\\n'", "b'7\\n'"], ["b'Solve -119*n + 65763 = 63026 for n.\\n'", "b'23\\n'"], ["b'Solve -40261 = -1209*o + 18980 for o.\\n'", "b'49\\n'"], ["b'Solve -18*u + 79*u = 57*u + 4 for u.\\n'", "b'1\\n'"], ["b'Solve 2328 = 89*h + 179*h + 23*h for h.\\n'", "b'8\\n'"], ["b'Solve -2925*o - 3810 = -2798*o for o.\\n'", "b'-30\\n'"], ["b'Solve -176*n - 259*n + 40*n = -19750 for n.\\n'", "b'50\\n'"], ["b'Solve -33*i = -291 + 441 - 817 - 422 for i.\\n'", "b'33\\n'"], ["b'Solve 1084*x - 105952 = -2181*x + 176*x - 222*x for x.\\n'", "b'32\\n'"], ["b'Solve 144*c - 32250 = 789*c for c.\\n'", "b'-50\\n'"], ["b'Solve -258*f + 1344 = 3281 + 8125 for f.\\n'", "b'-39\\n'"], ["b'Solve -1802*u = -24556 - 42118 for u.\\n'", "b'37\\n'"], ["b'Solve 9427 = 203*b - 3032 + 2918 for b.\\n'", "b'47\\n'"], ["b'Solve -5*j + 447 + 558 = 62*j for j.\\n'", "b'15\\n'"], ["b'Solve -3513 = 141*j + 1422 for j.\\n'", "b'-35\\n'"], ["b'Solve 165*j + 74*j = -6252 + 9359 for j.\\n'", "b'13\\n'"], ["b'Solve -7526 + 3404 - 6000 = 313*n + 4902 for n.\\n'", "b'-48\\n'"], ["b'Solve -356*s - 500 = 144*s for s.\\n'", "b'-1\\n'"], ["b'Solve -626*i = 224 + 18556 for i.\\n'", "b'-30\\n'"], ["b'Solve 143 = 133394*u - 133381*u for u.\\n'", "b'11\\n'"], ["b'Solve 0 = 354983*w - 354959*w - 672 for w.\\n'", "b'28\\n'"], ["b'Solve 0 = 597*n - 14670 - 9210 for n.\\n'", "b'40\\n'"], ["b'Solve 110*z + 29*z - 1215 + 5085 = 53*z for z.\\n'", "b'-45\\n'"], ["b'Solve -4764 - 8759 = 36*z - 306*z - 4883 for z.\\n'", "b'32\\n'"], ["b'Solve -34*r + 207 + 243 = 41*r for r.\\n'", "b'6\\n'"], ["b'Solve -2199*t + 922*t = 2268*t + 152435 for t.\\n'", "b'-43\\n'"], ["b'Solve 4068*y = 2000*y + 2025*y + 774 for y.\\n'", "b'18\\n'"], ["b'Solve 959*p = -208*p + 1094 + 13876 + 17706 for p.\\n'", "b'28\\n'"], ["b'Solve 886*m + 24185 + 15062 = 47*m + 9043 for m.\\n'", "b'-36\\n'"], ["b'Solve 236*o - 60*o - 1853 = -4073 - 3412 for o.\\n'", "b'-32\\n'"], ["b'Solve -1030*x - 102600 = 1022*x for x.\\n'", "b'-50\\n'"], ["b'Solve 0 = -592*a + 596*a - 76 for a.\\n'", "b'19\\n'"], ["b'Solve -107*x + 55*x - 57 + 30 = 77 for x.\\n'", "b'-2\\n'"], ["b'Solve 21*w + 26*w - 9*w - 3*w + 980 = 0 for w.\\n'", "b'-28\\n'"], ["b'Solve -1126*p + 3379 = 13364 + 5779 for p.\\n'", "b'-14\\n'"], ["b'Solve -85*f + 14*f - 13*f - 84 = 0 for f.\\n'", "b'-1\\n'"], ["b'Solve -274 + 2434 = 144*a + 126*a for a.\\n'", "b'8\\n'"], ["b'Solve -20*c + 6*c - 439 = 10*c + 449 for c.\\n'", "b'-37\\n'"], ["b'Solve -18*d - 11*d = -28*d - 3 for d.\\n'", "b'3\\n'"], ["b'Solve -10421*s + 10430*s - 216 = 0 for s.\\n'", "b'24\\n'"], ["b'Solve 157055 - 155431 = 56*f for f.\\n'", "b'29\\n'"], ["b'Solve 37*b - 5053 = -35*b - 11*b - 903 for b.\\n'", "b'50\\n'"], ["b'Solve 9578*f = 9487*f + 637 for f.\\n'", "b'7\\n'"], ["b'Solve 31*p + 1220742 - 1219688 = 0 for p.\\n'", "b'-34\\n'"], ["b'Solve -11055 = -532*f - 34995 for f.\\n'", "b'-45\\n'"], ["b'Solve 761*v + 371*v + 8975 = 94*v - 757*v for v.\\n'", "b'-5\\n'"], ["b'Solve 0 = -67*i + 19*i - 92*i - 140 for i.\\n'", "b'-1\\n'"], ["b'Solve 0 = 17709*n - 17629*n - 80 for n.\\n'", "b'1\\n'"], ["b'Solve 17*n + 1548 = 31*n - 50*n for n.\\n'", "b'-43\\n'"], ["b'Solve -877*i = 872*i - 62964 for i.\\n'", "b'36\\n'"], ["b'Solve 61*j - 339332 = -336892 for j.\\n'", "b'40\\n'"], ["b'Solve -485 - 478 = 22*b - 897 for b.\\n'", "b'-3\\n'"], ["b'Solve 0 = -92*c + 1373 + 29 + 714 for c.\\n'", "b'23\\n'"], ["b'Solve 63*c + 506 = -1006 for c.\\n'", "b'-24\\n'"], ["b'Solve -334*x - 499*x = -2621 - 5912 - 14791 for x.\\n'", "b'28\\n'"], ["b'Solve 635 = 71*c + 114*c - 1610 - 1270 for c.\\n'", "b'19\\n'"], ["b'Solve 70*p - 10520 = 1002*p + 13712 for p.\\n'", "b'-26\\n'"], ["b'Solve 196*x - 455 - 1265 - 3768 = 0 for x.\\n'", "b'28\\n'"], ["b'Solve 6912*h - 7070*h = -790 for h.\\n'", "b'5\\n'"], ["b'Solve 68*t = -76*t - 64*t - 1872 for t.\\n'", "b'-9\\n'"], ["b'Solve -360*q - 5457 = -12657 for q.\\n'", "b'20\\n'"], ["b'Solve -683989*j - 528 = -684033*j for j.\\n'", "b'12\\n'"], ["b'Solve 235*b = -28222 + 35507 for b.\\n'", "b'31\\n'"], ["b'Solve 1132*u = 1314*u - 2548 for u.\\n'", "b'14\\n'"], ["b'Solve -2171 = -39*u - 2366 for u.\\n'", "b'-5\\n'"], ["b'Solve 64*l + 5719 = 365*l for l.\\n'", "b'19\\n'"], ["b'Solve 0 = 4*f - f + 537 - 627 for f.\\n'", "b'30\\n'"], ["b'Solve 0 = 191*k - 6488 - 2871 for k.\\n'", "b'49\\n'"], ["b'Solve 540 - 270 = 93*o + 108*o + 270 for o.\\n'", "b'0\\n'"], ["b'Solve -401*b + 320*b = 2025 for b.\\n'", "b'-25\\n'"], ["b'Solve 4116 = 15*p + 4326 for p.\\n'", "b'-14\\n'"], ["b'Solve -1242 - 177 = 21*v + 12*v for v.\\n'", "b'-43\\n'"], ["b'Solve 318*o - 4308 + 2718 = 0 for o.\\n'", "b'5\\n'"], ["b'Solve 282*o = 123*o - 384*o + 14118 for o.\\n'", "b'26\\n'"], ["b'Solve -129*p = -11269 + 5335 for p.\\n'", "b'46\\n'"], ["b'Solve -669*z + 5040 = -529*z for z.\\n'", "b'36\\n'"], ["b'Solve 33*n + 124*n = -58*n + 29*n - 7998 for n.\\n'", "b'-43\\n'"], ["b'Solve -2998*g + 2825*g + 1050 = -3448 for g.\\n'", "b'26\\n'"], ["b'Solve 114*c - 1197 - 2864 = -135*c + 421 for c.\\n'", "b'18\\n'"], ["b'Solve -254*k - 56*k - 4597 - 1823 = 118*k for k.\\n'", "b'-15\\n'"], ["b'Solve -1114*r + 7138 + 2365 = -19692 + 2459 for r.\\n'", "b'24\\n'"], ["b'Solve -46*a + 884*a - 92*a - 32078 = 0 for a.\\n'", "b'43\\n'"], ["b'Solve -111*g = -30118 + 28342 for g.\\n'", "b'16\\n'"], ["b'Solve -468 = -121489*n + 121411*n for n.\\n'", "b'6\\n'"], ["b'Solve -2476*y + 388 = -2173*y - 8702 for y.\\n'", "b'30\\n'"], ["b'Solve 333*c + 3910 = 563*c for c.\\n'", "b'17\\n'"], ["b'Solve 286*s + 2537 + 3007 = -110*s for s.\\n'", "b'-14\\n'"], ["b'Solve -183*l + 12873 - 11226 = 0 for l.\\n'", "b'9\\n'"], ["b'Solve 38*i - 76*i - 74*i + 4284 = -10*i for i.\\n'", "b'42\\n'"], ["b'Solve -153 = 785*j + 3814 + 4668 for j.\\n'", "b'-11\\n'"], ["b'Solve 122*n - 758*n + 134 = 1406 for n.\\n'", "b'-2\\n'"], ["b'Solve 328*z = -9014 + 158 for z.\\n'", "b'-27\\n'"], ["b'Solve 4*w - 19*w + 2*w = -19*w - 204 for w.\\n'", "b'-34\\n'"], ["b'Solve 1196 = -70072*f + 70118*f for f.\\n'", "b'26\\n'"], ["b'Solve -11*p - 6*p = p - 11*p + 217 for p.\\n'", "b'-31\\n'"], ["b'Solve -213*w - 12712 = 2*w + 245*w - 6*w for w.\\n'", "b'-28\\n'"], ["b'Solve 882*b + 3395 + 9615 = 1544 for b.\\n'", "b'-13\\n'"], ["b'Solve -1013*t + 960*t = 2226 for t.\\n'", "b'-42\\n'"], ["b'Solve -464*t - 28576 = 288*t for t.\\n'", "b'-38\\n'"], ["b'Solve 5319 + 3027 = 243*u + 84 for u.\\n'", "b'34\\n'"], ["b'Solve -38755*w + 38905*w + 450 = 0 for w.\\n'", "b'-3\\n'"], ["b'Solve 12*v + 42*v + 632 = 22*v - 936 for v.\\n'", "b'-49\\n'"], ["b'Solve 799*h + 796*h - 451 = 1606*h for h.\\n'", "b'-41\\n'"], ["b'Solve 1695986*x - 1695952*x = -340 for x.\\n'", "b'-10\\n'"], ["b'Solve -922*b - 6405 = -1227*b for b.\\n'", "b'21\\n'"], ["b'Solve 1680*r + 1118 = -14400 - 20628 - 27694 for r.\\n'", "b'-38\\n'"], ["b'Solve 59*t + 578 = 1522 for t.\\n'", "b'16\\n'"], ["b'Solve 5342 = -360*n - 6178 for n.\\n'", "b'-32\\n'"], ["b'Solve -9*a - 49 + 16 = 19*a + 51 for a.\\n'", "b'-3\\n'"], ["b'Solve -3*a + 6 - 5 - 39 = -2 for a.\\n'", "b'-12\\n'"], ["b'Solve 1122*t = 183*t - 33804 for t.\\n'", "b'-36\\n'"], ["b'Solve 1068*p - 30256 = 92*p for p.\\n'", "b'31\\n'"], ["b'Solve 1755 = 3*q - 4*q + 40*q for q.\\n'", "b'45\\n'"], ["b'Solve -39*a - 18*a + 893 = -7*a - 907 for a.\\n'", "b'36\\n'"], ["b'Solve 0 = 103*l - 123*l + 840 for l.\\n'", "b'42\\n'"], ["b'Solve 3*n + 293*n = 120*n + 1936 for n.\\n'", "b'11\\n'"], ["b'Solve -971 = -157*k + 249 + 1135 for k.\\n'", "b'15\\n'"], ["b'Solve 1228*r + 21729 + 34759 = 0 for r.\\n'", "b'-46\\n'"], ["b'Solve 612*y + 1089*y = -1604*y - 62795 for y.\\n'", "b'-19\\n'"], ["b'Solve 24*q = -9495 + 10263 for q.\\n'", "b'32\\n'"], ["b'Solve -119*b - 322 - 862 = 29*b for b.\\n'", "b'-8\\n'"], ["b'Solve 1028 = -49*z + 142 - 143 for z.\\n'", "b'-21\\n'"], ["b'Solve 1599*j = 2263*j - 3984 for j.\\n'", "b'6\\n'"], ["b'Solve -814*z + 457*z = -2335*z - 13846 for z.\\n'", "b'-7\\n'"], ["b'Solve -147*u - 494*u + 11474 - 2871 = -4858 for u.\\n'", "b'21\\n'"], ["b'Solve -5*y - 11296 + 11166 = 0 for y.\\n'", "b'-26\\n'"], ["b'Solve 18577 = -200*w + 828*w - 891 for w.\\n'", "b'31\\n'"], ["b'Solve -32*l - 31*l + 63*l = 27*l + 243 for l.\\n'", "b'-9\\n'"], ["b'Solve -1233*b - 28*b - 1513 - 7314 = 0 for b.\\n'", "b'-7\\n'"], ["b'Solve -383*v + 1187*v = -908*v + 18832 for v.\\n'", "b'11\\n'"], ["b'Solve -784*g = 12580 - 46292 for g.\\n'", "b'43\\n'"], ["b'Solve -23 = 11*d - 19 - 521 for d.\\n'", "b'47\\n'"], ["b'Solve 36*g - 144 = -79*g - 610 - 1834 for g.\\n'", "b'-20\\n'"], ["b'Solve 1689*w = 1402*w + 3731 for w.\\n'", "b'13\\n'"], ["b'Solve -517*y - 2942 - 19806 = 0 for y.\\n'", "b'-44\\n'"], ["b'Solve -140*v - 3 + 969 = -2*v for v.\\n'", "b'7\\n'"], ["b'Solve 815*m = -349*m - 1102*m - 49852 for m.\\n'", "b'-22\\n'"], ["b'Solve a + 10*a + 24 = -40 + 20 for a.\\n'", "b'-4\\n'"], ["b'Solve 1703*l - 1647*l - 842 - 614 = 0 for l.\\n'", "b'26\\n'"], ["b'Solve -1496755*y = -1496737*y - 162 for y.\\n'", "b'9\\n'"], ["b'Solve 99 - 1270 = -667*u + 4818 + 6017 for u.\\n'", "b'18\\n'"], ["b'Solve 3414*b = 3407*b - 343 for b.\\n'", "b'-49\\n'"], ["b'Solve 1796 - 651 = -229*x for x.\\n'", "b'-5\\n'"], ["b'Solve 714 = 38*b - 65*b - 10*b - 877 for b.\\n'", "b'-43\\n'"], ["b'Solve 108*n = 853*n + 3238 - 10688 for n.\\n'", "b'10\\n'"], ["b'Solve 13*y + y = 144*y - 3770 for y.\\n'", "b'29\\n'"], ["b'Solve -196*y = -12278 + 12474 for y.\\n'", "b'-1\\n'"], ["b'Solve -4441 - 6004 = 1375*s + 714*s for s.\\n'", "b'-5\\n'"], ["b'Solve -30*j = -3358*j - 53478 - 63002 for j.\\n'", "b'-35\\n'"], ["b'Solve 10*t + 23*t + 65*t + 21*t + 2975 = 0 for t.\\n'", "b'-25\\n'"], ["b'Solve -2114 - 731 = -102*z + 15*z - 1453 for z.\\n'", "b'16\\n'"], ["b'Solve -119022*c = -118925*c - 236 - 152 for c.\\n'", "b'4\\n'"], ["b'Solve -20*s + 29*s + 14*s - 5 = 271 for s.\\n'", "b'12\\n'"], ["b'Solve 335*d = 143*d + 36*d + 7644 for d.\\n'", "b'49\\n'"], ["b'Solve -215*b - 156*b + 307*b = -1344 for b.\\n'", "b'21\\n'"], ["b'Solve 0 = -482*x + 238*x + 241*x - 9 for x.\\n'", "b'-3\\n'"], ["b'Solve 2841*b = 3013*b + 3612 for b.\\n'", "b'-21\\n'"], ["b'Solve -770*r - 4946 = -870*r - 1146 for r.\\n'", "b'38\\n'"], ["b'Solve 34*i + 65*i + 49*i = 180*i - 1152 for i.\\n'", "b'36\\n'"], ["b'Solve 60*r - 17784 = -17*r - 767*r + 4160 for r.\\n'", "b'26\\n'"], ["b'Solve -462*w - 1634 + 3259 = -10240 - 5229 for w.\\n'", "b'37\\n'"], ["b'Solve 72*k + 1949 = 204*k - 691 for k.\\n'", "b'20\\n'"], ["b'Solve 983979*l - 984022*l = -559 for l.\\n'", "b'13\\n'"], ["b'Solve -2011*r + 4624 = -2589*r for r.\\n'", "b'-8\\n'"], ["b'Solve -6398 = 651*p + 498*p + 725*p - 49500 for p.\\n'", "b'23\\n'"], ["b'Solve 15*x + 197 - 62 = 0 for x.\\n'", "b'-9\\n'"], ["b'Solve 20*n + 885*n - 28345 - 615 = 0 for n.\\n'", "b'32\\n'"], ["b'Solve 94*c + 74*c = -11*c + 7876 for c.\\n'", "b'44\\n'"], ["b'Solve -146*s + 3881 - 6407 - 20244 = 544*s for s.\\n'", "b'-33\\n'"], ["b'Solve -121*f + 272*f = 44 + 560 for f.\\n'", "b'4\\n'"], ["b'Solve 18*x - 412 + 154 - 480 = 0 for x.\\n'", "b'41\\n'"], ["b'Solve -21*n - 57*n - 36*n - 1764 = -16*n for n.\\n'", "b'-18\\n'"], ["b'Solve 3656*y + 5454 = 3454*y for y.\\n'", "b'-27\\n'"], ["b'Solve -185954*u = -185996*u + 1470 for u.\\n'", "b'35\\n'"], ["b'Solve -1653*p + 1232*p - 13472 = 0 for p.\\n'", "b'-32\\n'"], ["b'Solve -600*x - 266*x + 149*x = -434 - 1000 for x.\\n'", "b'2\\n'"], ["b'Solve 260*x - 247 + 29 - 302 = 0 for x.\\n'", "b'2\\n'"], ["b'Solve -38559 + 38451 = 41*r - 14*r for r.\\n'", "b'-4\\n'"], ["b'Solve 25*c - 34*c + 2647 = 94*c - 31 for c.\\n'", "b'26\\n'"], ["b'Solve 454 - 788 = 391*x + 6169 + 2099 for x.\\n'", "b'-22\\n'"], ["b'Solve -767*w = 361*w + 2975 + 6049 for w.\\n'", "b'-8\\n'"], ["b'Solve 0 = -6429*f + 6250*f + 6623 for f.\\n'", "b'37\\n'"], ["b'Solve 761*v + 371*v + 8975 = 94*v - 757*v for v.\\n'", "b'-5\\n'"], ["b'Solve -2*u - 5*u + 2940 = 57*u + 41*u for u.\\n'", "b'28\\n'"], ["b'Solve 178*m + 185830 - 192950 = 0 for m.\\n'", "b'40\\n'"], ["b'Solve -31*l - 175385 = -175540 for l.\\n'", "b'5\\n'"], ["b'Solve 13*u = 4*u - 5*u - 10*u - 360 for u.\\n'", "b'-15\\n'"], ["b'Solve 38*q + 18*q - 1126 - 461 = -411 for q.\\n'", "b'21\\n'"], ["b'Solve 6380*f - 160 - 775 = 6193*f for f.\\n'", "b'5\\n'"], ["b'Solve 93*w - 93*w - 4536 = 92*w + 76*w for w.\\n'", "b'-27\\n'"], ["b'Solve -19*y - 7 = -47*y - 19 - 16 for y.\\n'", "b'-1\\n'"], ["b'Solve 2232 = 27*a + 1585 + 1160 for a.\\n'", "b'-19\\n'"], ["b'Solve 37673*a - 777 = 75423*a - 37713*a for a.\\n'", "b'-21\\n'"], ["b'Solve -336 - 347 + 667 = -o for o.\\n'", "b'16\\n'"], ["b'Solve -270*s = -266*s + 204*s - 5616 for s.\\n'", "b'27\\n'"], ["b'Solve -411*o = -221*o + 393*o - 8162 for o.\\n'", "b'14\\n'"], ["b'Solve -272 - 371 = -287*y + 147*y + 617 for y.\\n'", "b'9\\n'"], ["b'Solve 4152 + 2295 = 113*r + 766 + 935 for r.\\n'", "b'42\\n'"], ["b'Solve -819 + 1838 = -209*h - 4144 - 2152 for h.\\n'", "b'-35\\n'"], ["b'Solve -60*f = -170*f - 310*f - 3319 - 13901 for f.\\n'", "b'-41\\n'"], ["b'Solve -25663 - 19256 = 1953*z for z.\\n'", "b'-23\\n'"], ["b'Solve -14610 = 3021*m - 3988*m - 4940 for m.\\n'", "b'10\\n'"], ["b'Solve 10 = 13*o + 31 - 10 + 54 for o.\\n'", "b'-5\\n'"], ["b'Solve 1224 = -378*h + 412*h for h.\\n'", "b'36\\n'"], ["b'Solve 270*i + 555*i - 6919 - 17399 - 11982 = 0 for i.\\n'", "b'44\\n'"], ["b'Solve -987 = 25316*k - 25337*k for k.\\n'", "b'47\\n'"], ["b'Solve 2003*k - 21065 = 16992 for k.\\n'", "b'19\\n'"], ["b'Solve 813*m = -187*m - 28000 for m.\\n'", "b'-28\\n'"], ["b'Solve -2519*v + 1197*v + 3145 = -1237*v for v.\\n'", "b'37\\n'"], ["b'Solve -1576*h - 19690 = 8148 + 46234 for h.\\n'", "b'-47\\n'"], ["b'Solve 596*w + 5534 + 5538 = -788*w for w.\\n'", "b'-8\\n'"], ["b'Solve -169*o + 2519 = 161*o + 3179 for o.\\n'", "b'-2\\n'"], ["b'Solve 272*g + 135*g = 139*g - 448*g + 16468 for g.\\n'", "b'23\\n'"], ["b'Solve -80*a + 3066 = 5*a + 61*a for a.\\n'", "b'21\\n'"], ["b'Solve -9567 + 4867 + 4868 = -12*h for h.\\n'", "b'-14\\n'"], ["b'Solve 397 + 7762 = -199*c for c.\\n'", "b'-41\\n'"], ["b'Solve 0 = 26*v - 30272 + 30116 for v.\\n'", "b'6\\n'"], ["b'Solve 53903 + 16943 = 2795*d + 12151 for d.\\n'", "b'21\\n'"], ["b'Solve 2994 - 5930 = -27*i - 1883 for i.\\n'", "b'39\\n'"], ["b'Solve 148*i - 1089 - 602 - 1019 = 102 for i.\\n'", "b'19\\n'"], ["b'Solve 3091*q - 52992 = 1987*q for q.\\n'", "b'48\\n'"], ["b'Solve -1202 - 582 = -152*b - 122 + 162 for b.\\n'", "b'12\\n'"], ["b'Solve 110*t + 194 = -8*t - 114*t + 4138 for t.\\n'", "b'17\\n'"], ["b'Solve 130*q - 1308 - 963 = 719 for q.\\n'", "b'23\\n'"], ["b'Solve -8077 = -790*p - 1442*p - 83965 for p.\\n'", "b'-34\\n'"], ["b'Solve -66242*q + 66311*q + 2691 = 0 for q.\\n'", "b'-39\\n'"], ["b'Solve 1293 + 2 = 37*r for r.\\n'", "b'35\\n'"], ["b'Solve 0 = 21*o + 46544 - 46796 for o.\\n'", "b'12\\n'"], ["b'Solve 0 = 245*y + 5744 + 2096 for y.\\n'", "b'-32\\n'"], ["b'Solve 156 - 90 + 197 = 25*j - 637 for j.\\n'", "b'36\\n'"], ["b'Solve -697*g + 5966 = -2357 + 656 for g.\\n'", "b'11\\n'"], ["b'Solve -169*z + 421*z - 197*z + 440 = 0 for z.\\n'", "b'-8\\n'"], ["b'Solve -24402 = 194*h + 293*h + 675*h for h.\\n'", "b'-21\\n'"], ["b'Solve 3*d + 3*d - 3003 = -20*d - 2431 for d.\\n'", "b'22\\n'"], ["b'Solve 83*o - 1883 - 2267 = 0 for o.\\n'", "b'50\\n'"], ["b'Solve 0 = -211*y - 1481*y + 49126 + 10094 for y.\\n'", "b'35\\n'"], ["b'Solve 346 = 179*w - 4845 for w.\\n'", "b'29\\n'"], ["b'Solve 154*b + 824*b - 10575 = 300*b - 497*b for b.\\n'", "b'9\\n'"], ["b'Solve -356 = -37*i + 54*i + 375 for i.\\n'", "b'-43\\n'"], ["b'Solve -43*q + 150 + 525 + 959 = 0 for q.\\n'", "b'38\\n'"], ["b'Solve -53*f - 568740 + 567680 = 0 for f.\\n'", "b'-20\\n'"], ["b'Solve 4650 - 1603 = 95*p - 848 for p.\\n'", "b'41\\n'"], ["b'Solve 1012 = -11*o + 1578 - 852 for o.\\n'", "b'-26\\n'"], ["b'Solve -5439 = -221*z + 4285 for z.\\n'", "b'44\\n'"], ["b'Solve -175*v = -144*v + 368*v - 3591 for v.\\n'", "b'9\\n'"], ["b'Solve -299 = -47*z - 12 - 5 for z.\\n'", "b'6\\n'"], ["b'Solve 42*s - 142*s = -46*s - 25*s - 1160 for s.\\n'", "b'40\\n'"], ["b'Solve -8*y - 53 - 15 = -4*y - 21*y for y.\\n'", "b'4\\n'"], ["b'Solve -426 = 530*p - 267*p - 3430 - 152 for p.\\n'", "b'12\\n'"], ["b'Solve 1203*b + 1340*b - 710*b - 60489 = 0 for b.\\n'", "b'33\\n'"], ["b'Solve -464*i = -1696*i for i.\\n'", "b'0\\n'"], ["b'Solve -424*g + 1054*g - 28980 = 0 for g.\\n'", "b'46\\n'"], ["b'Solve -4229*a - 517 = -4276*a for a.\\n'", "b'11\\n'"], ["b'Solve -5*l - l + 39 = -12*l + 7*l for l.\\n'", "b'39\\n'"], ["b'Solve 913*o + 48 = 917*o for o.\\n'", "b'12\\n'"], ["b'Solve 360*r = 456*r + 425 - 9 - 32 for r.\\n'", "b'-4\\n'"], ["b'Solve 102*i = -59*i + 16*i - 1429 + 5634 for i.\\n'", "b'29\\n'"], ["b'Solve -64*w + 44487 = 22630 + 23137 for w.\\n'", "b'-20\\n'"], ["b'Solve 1766 = 226*z + 181 - 6777 for z.\\n'", "b'37\\n'"], ["b'Solve 4217 = -524*y + 3888 + 23385 for y.\\n'", "b'44\\n'"], ["b'Solve 98*p + 303*p + 5998 - 1640 = -4865 for p.\\n'", "b'-23\\n'"], ["b'Solve 62*j + 103*j - 244 + 63 + 1336 = 0 for j.\\n'", "b'-7\\n'"], ["b'Solve -61*s + 8453 = 208*s + 2146 - 2301 for s.\\n'", "b'32\\n'"], ["b'Solve -715 + 1000 = -84*j + 21*j - 1605 for j.\\n'", "b'-30\\n'"], ["b'Solve -40*o + 801 = -101*o - 1889 + 860 for o.\\n'", "b'-30\\n'"], ["b'Solve 0*j + 5*j + 23*j + 399 = 9*j for j.\\n'", "b'-21\\n'"], ["b'Solve -3*i - i - 48 = -6*i - 0*i for i.\\n'", "b'24\\n'"], ["b'Solve 3640*f - 3616*f - 72 = 0 for f.\\n'", "b'3\\n'"], ["b'Solve -1965*p + 1230*p = -19110 for p.\\n'", "b'26\\n'"], ["b'Solve 269*a + 2054 = 8*a - 295 for a.\\n'", "b'-9\\n'"], ["b'Solve -164*x - 289*x = 0 for x.\\n'", "b'0\\n'"], ["b'Solve -936*g + 12910 + 7598 = 321*g - 18459 for g.\\n'", "b'31\\n'"], ["b'Solve -745 + 531 = -21*l - 17*l + 1192 for l.\\n'", "b'37\\n'"], ["b'Solve -91*w + 3 = 87 + 125 + 64 for w.\\n'", "b'-3\\n'"], ["b'Solve 36*i + 5286 + 5350 + 914 = 267*i for i.\\n'", "b'50\\n'"], ["b'Solve -168*j - 203*j + 457*j + 104 = 18 for j.\\n'", "b'-1\\n'"], ["b'Solve 656*y - 743 - 2537 = 0 for y.\\n'", "b'5\\n'"], ["b'Solve 374*t = 1013 + 7589 for t.\\n'", "b'23\\n'"], ["b'Solve -548 - 1238 = 979*q + 958*q - 1984*q for q.\\n'", "b'38\\n'"], ["b'Solve 2184*u - 167*u + 39779 = 247*u - 36331 for u.\\n'", "b'-43\\n'"], ["b'Solve 456*n = -331*n + 1045*n - 10320 for n.\\n'", "b'40\\n'"], ["b'Solve 2*j + 2484 - 4911 = -2459 for j.\\n'", "b'-16\\n'"], ["b'Solve 40*l - 18770 = -9011 - 8959 for l.\\n'", "b'20\\n'"], ["b'Solve 17*h + 40*h - 65 - 1050 - 1165 = 0 for h.\\n'", "b'40\\n'"], ["b'Solve 280 + 602 = -18*o + 74*o - 35*o for o.\\n'", "b'42\\n'"], ["b'Solve 42*x - 17369 = -18713 for x.\\n'", "b'-32\\n'"], ["b'Solve -22*o - 558 = -346*o - 86*o + 1082 for o.\\n'", "b'4\\n'"], ["b'Solve 12*i + i - 39 = -45*i + 77 for i.\\n'", "b'2\\n'"], ["b'Solve -144*f = -330*f - 607*f - 250*f + 46935 for f.\\n'", "b'45\\n'"], ["b'Solve 0 = 378*z + 653*z + 4416 - 1063 + 7988 for z.\\n'", "b'-11\\n'"], ["b'Solve 26333 - 2167 = -993*d + 257*d - 1594 for d.\\n'", "b'-35\\n'"], ["b'Solve 2915*z - 1473*z + 810 = 1469*z for z.\\n'", "b'30\\n'"], ["b'Solve 389 = -12*y + 250 - 437 - 0 for y.\\n'", "b'-48\\n'"], ["b'Solve 180*u + 681 + 60 + 519 = 0 for u.\\n'", "b'-7\\n'"], ["b'Solve -360*q - 5457 = -12657 for q.\\n'", "b'20\\n'"], ["b'Solve -112*a + 113*a - 11203 = 660*a for a.\\n'", "b'-17\\n'"], ["b'Solve -30200 = -883*g - 627*g for g.\\n'", "b'20\\n'"], ["b'Solve 1619100*r - 1619160*r - 2040 = 0 for r.\\n'", "b'-34\\n'"], ["b'Solve v + 6*v = -5*v + 43*v + 43*v for v.\\n'", "b'0\\n'"], ["b'Solve 0 = 14*b + 44*b - 227*b + 2028 for b.\\n'", "b'12\\n'"], ["b'Solve 88*t - 380*t - 262*t = -88*t - 4660 for t.\\n'", "b'10\\n'"], ["b'Solve 73322 = 366*z + 60146 for z.\\n'", "b'36\\n'"], ["b'Solve 3797 = -6*c + 169*c - 3864 for c.\\n'", "b'47\\n'"], ["b'Solve 657 - 585 = 8*n for n.\\n'", "b'9\\n'"], ["b'Solve 21608 = -8*u + 21352 for u.\\n'", "b'-32\\n'"], ["b'Solve 1866*s = -96642 + 29466 for s.\\n'", "b'-36\\n'"], ["b'Solve -81*y - 284 + 43 - 1253 = 85*y for y.\\n'", "b'-9\\n'"], ["b'Solve -37*x - 491 = 416*x + 1452 + 4399 for x.\\n'", "b'-14\\n'"], ["b'Solve 498*w + 108*w = 16*w + 101*w + 21027 for w.\\n'", "b'43\\n'"], ["b'Solve -19*x - 727 = -53*x + 123 for x.\\n'", "b'25\\n'"], ["b'Solve -1425*p = -1054*p + 1872*p - 38131 for p.\\n'", "b'17\\n'"], ["b'Solve -29*k - 36*k - 88*k + 54*k = -990 for k.\\n'", "b'10\\n'"], ["b'Solve 25*a - 219 + 266 - 1297 = 0 for a.\\n'", "b'50\\n'"], ["b'Solve -124*a + 72*a - 6567 = 307*a + 7793 for a.\\n'", "b'-40\\n'"], ["b'Solve 304*h + 144*h = -588*h - 8288 for h.\\n'", "b'-8\\n'"], ["b'Solve -24*l - 578 - 604 = 124*l + 1630 for l.\\n'", "b'-19\\n'"], ["b'Solve 533*l = 1503*l - 32980 for l.\\n'", "b'34\\n'"], ["b'Solve 0 = -1120*p + 524*p + 541*p - 1139 - 1116 for p.\\n'", "b'-41\\n'"], ["b'Solve -253*o = 1044*o - 11795 + 27337 + 10398 for o.\\n'", "b'-20\\n'"], ["b'Solve -1008*z - 604*z + 164*z + 20704 = -154*z for z.\\n'", "b'16\\n'"], ["b'Solve 11*s = -446 + 157 + 3 for s.\\n'", "b'-26\\n'"], ["b'Solve 6013*z - 5086*z = -8343 for z.\\n'", "b'-9\\n'"], ["b'Solve 194*q - 1943*q - 27688 - 87952 = 1142*q for q.\\n'", "b'-40\\n'"], ["b'Solve 1381*g - 4313 = -45743 for g.\\n'", "b'-30\\n'"], ["b'Solve -153401 + 18965 = 3954*h for h.\\n'", "b'-34\\n'"], ["b'Solve 685 - 2077 = 29*l for l.\\n'", "b'-48\\n'"], ["b'Solve 1407*k + 2900*k = 1456*k + 133997 for k.\\n'", "b'47\\n'"], ["b'Solve 3*n + 49 = 339 - 91 - 106 for n.\\n'", "b'31\\n'"], ["b'Solve -9589*b - 25438 = -9036*b for b.\\n'", "b'-46\\n'"], ["b'Solve 366*o + 20658 = -555*o + 295*o for o.\\n'", "b'-33\\n'"], ["b'Solve -147711 = 301*b - 147109 for b.\\n'", "b'-2\\n'"], ["b'Solve 510*q + 1119 = -2451 for q.\\n'", "b'-7\\n'"]]


stemmer = PorterStemmer()

def tokenize(sentence):
    return nltk.word_tokenize(sentence)
def stem(words):
    return stemmer.stem(words.lower())
def bag_of_words(tokenized_sentence, all_words):
    tokenized_sentence = [stem(w) for w in tokenized_sentence]
    bag = np.zeros(len(all_words), dtype=np.float32)
    for (idx, w) in enumerate(all_words):
        if w in tokenized_sentence:
            bag[idx] = 1.0
    return bag
class NeuralNet(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super(NeuralNet, self).__init__()
        self.l1 = nn.Linear(input_size, hidden_size)
        self.l2 = nn.Linear(hidden_size, hidden_size)
        self.l3 = nn.Linear(hidden_size, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        out = self.l1(x)
        out = self.relu(out)
        out = self.l2(out)
        out = self.relu(out)
        out = self.l3(out)
        return out

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

with open('intents.json', 'r', encoding="utf8") as json_data:
    intents = json.load(json_data)

FILE = "data.pth"
data = torch.load(FILE)

input_size = data["input_size"]
hidden_size = data["hidden_size"]
output_size = data["output_size"]
all_words = data['all_words']
tags = data['tags']
model_state = data["model_state"]

model = NeuralNet(input_size, hidden_size, output_size).to(device)
model.load_state_dict(model_state)
model.eval()


def calendar():
	time_1 = datetime.now()
	time_2 = datetime.strptime('2024:7:8:7:00:00',"%Y:%m:%d:%H:%M:%S")

	time_interval = time_2 - time_1
	time_interval_list = (str(time_interval)).split()
	# print(time_interval_list)
	return "Còn " + time_interval_list[0] + " ngày, " + time_interval_list[2][:-13] + " giờ, " + time_interval_list[2][-12:-10] + " phút, " + time_interval_list[2][-9:-7] + " giây nữa là thi THPT quốc gia rồi đó."

template_format = {
    'ttm' : 'Joe Biden',
    'hour' : datetime.now().strftime("%H"),
    'minute' : datetime.now().strftime("%M"),
    'second' : datetime.now().strftime("%S"),
    'time_interval' : calendar()
}

print("Let's chat! (type 'quit' to exit)")
def get_emilia_response(message):
    message = tokenize(message)
    reply = ''
    X = bag_of_words(message, all_words)
    X = X.reshape(1, X.shape[0])
    X = torch.from_numpy(X).to(device)
    output = model(X)
    _, predicted = torch.max(output, dim=1)
    tag = tags[predicted.item()]
    probs = torch.softmax(output, dim=1)
    prob = probs[0][predicted.item()]
    if prob.item() > 0.75:
        for intent in intents['intents']:
            if tag == intent["tag"]:
                result = random.choice(intent['responses'])
                reply = result.format(**template_format)
    else:
        reply_don_know = ['Hong hiểu nói gì luôn á', 'Gì vậy bạn', 'Hả', 'Hong hiểu']
        reply = random.choice(reply_don_know)
    return reply
load_dotenv()

# Create app
app = Flask(__name__)
app.config['SECRET_KEY'] = "2b3ifbf302f9nc1j2po1jewkajsd"
app.config['UPLOAD_FOLDER'] = 'static/photo_url/Users'
app.config['MAIL_SERVER'] = "smtp.googlemail.com"
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///user.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = "1"
GOOGLE_CLIENT_ID = "718106880185-vg443k204bnpn8u61fvmlu534dseq11b.apps.googleusercontent.com"
client_secrets_file = os.path.join(
    pathlib.Path(__file__).parent, "client_secret.json")
app.permanent_session_lifetime = timedelta(minutes=50)
mail = Mail(app)
db = SQLAlchemy()
db.init_app(app)
socketio = SocketIO(app, cors_allowed_origin="*")
# Google login
hash = {}

flow = Flow.from_client_secrets_file(
    client_secrets_file=client_secrets_file,
    scopes=["https://www.googleapis.com/auth/userinfo.profile",
            "https://www.googleapis.com/auth/userinfo.email", "openid"],
    redirect_uri="http://127.0.0.1:5000/callback",
)


def login_is_required(function):
    def wrapper(*args, **kwargs):
        if "google_id" not in session:
            return abort(401)
        else:
            return function()
    return wrapper

# Database model


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    chat = db.Column(db.String)


class Room(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    host = db.Column(db.String)
    name = db.Column(db.String)
    password = db.Column(db.String)
    photo_url = db.Column(db.String)
    color = db.Column(db.String)
    participants = db.Column(db.String)
    description = db.Column(db.String)
    chat = db.Column(db.String)
    top = db.Column(db.String)

    def __init__(self, name, participants, password, color, description):
        self.name = name
        self.password = password
        self.host = participants
        self.participants = participants
        self.photo_url = 'admin.jpg'
        self.chat = ''
        self.color = color
        self.description = description
        self.top = '1^^^^0^^^^admin.jpg^^^^-$$$$1^^^^0^^^^admin.jpg^^^^-$$$$1^^^^0^^^^admin.jpg^^^^-'


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String, unique=True, nullable=False)
    password = db.Column(db.String, nullable=False)
    name = db.Column(db.String)
    photo_url = db.Column(db.String)
    email = db.Column(db.String)
    note = db.Column(db.String)
    # chat = db.Column(db.String, nullable=True)
    room = db.Column(db.String)

    def __init__(self, username, password, name):
        self.username = username
        self.password = password
        self.name = name
        self.photo_url = 'admin.jpg'
        # self.chat = ''
        self.room = ''
        self.note = ''

# Trailing slash


@app.route('/', methods=["POST", "GET"])
def log_in():
    found_user = User.query.filter_by(username='-').first()
    if (found_user == None):
        new_user = User('-', '123', '-')
        db.session.add(new_user)
        db.session.commit()
    if request.method == "POST":
        username = request.form['username']
        username = username.strip()
        password = request.form['password']
        # password = password.strip()
        found_user = User.query.filter_by(username=username).first()
        if username == '' or password == '':
            flash('Please enter valid username and password', 'info')
            return redirect(url_for('log_in'))
        if found_user == None:
            flash('Username not found', 'info')
            return redirect(url_for('log_in'))
        if found_user.password != password:
            flash('Wrong password', 'info')
            return redirect(url_for('log_in'))
        if found_user.email == None:
            flash("Email not activated please check your email", "info")
            return redirect(url_for("log_in"))
        session["username"] = username
        return redirect(url_for('dashboard'))
    if "username" in session:
        return redirect(url_for("dashboard"))
    return render_template('log_in.html', session=session)


@app.route("/loginbygoogleaccount")
def loginbygoogleaccount():
    authorization_url, state = flow.authorization_url()
    return redirect(authorization_url)


@app.route("/callback")
def callback():
    flow.fetch_token(authorization_response=request.url)
    credentials = flow.credentials
    request_session = requests.session()
    cached_session = cachecontrol.CacheControl(request_session)
    token_request = google.auth.transport.requests.Request(
        session=cached_session)
    id_info = id_token.verify_oauth2_token(
        id_token=credentials._id_token,
        request=token_request,
        audience=GOOGLE_CLIENT_ID
    )
    username = id_info["sub"]
    password = ''.join(random.choice(
        string.ascii_letters + string.digits) for _ in range(10))
    found_user = User.query.filter_by(username=username).first()
    name = id_info["name"]
    if found_user == None:
        user = User(username, password, name)
        user.email = id_info["email"]
        img_data = requests.get(id_info["picture"][:-2] + "0").content

        with open('static/photo_url/Users/' + username + '.jpg', 'wb') as handler:
            handler.write(img_data)

        db.session.add(user)
        db.session.commit()

    found_user = User.query.filter_by(username=username).first()
    found_user.photo_url = username + ".jpg"
    db.session.commit()
    return render_template('log_in_by_google_account.html', username=username, password=found_user.password)


@app.route('/signup', methods=["POST", "GET"])
def signup():
    if (request.method == "POST"):
        username = request.form["username"]
        username = username.strip()
        password = request.form["password"]
        rpassword = request.form["rpassword"]
        email = request.form["email"]
        if username == '' or password == '':
            flash('Please enter valid username and password', 'info')
            return redirect(url_for('signup'))
        if (password != rpassword):
            flash("Password doesn't match", "info")
            return redirect(url_for("signup"))
        found_user = User.query.filter_by(username=username).first()
        user = User(username, password, username)
        if (found_user == None):
            db.session.add(user)
            db.session.commit()
        else:
            flash("The username have been taken", "info")
            return redirect(url_for("signup"))
        # notification = ["Account created! Please log in again", 1]
        # flash(notification)
        # return redirect(url_for("login"))
        sender = "noreply@app.com"
        msg_title = "Createen: Confirm your email address"
        msg = Message(msg_title, sender=sender, recipients=[email])
        hashemail = sha256(email.encode('utf-8')).hexdigest()
        hash[hashemail] = email
        msg.body = 'Hello ' + username + """,\nThanks for signing up for Createen!\nPlease click this link to confirm your email address.
This means you will be able to reset your password if you forget it later, which is especially important if you have a paid account!
If you can't click the link from your email program, please copy this URL and paste it into your web browser:
http://127.0.0.1:5000/confirmEmailSuccess/""" + username+"/" + hashemail + """ 
If you don't want to use Createen, just ignore this message and we won't bother you again.\nCheers,\nThe Create team"""
        data = {
            'username': username,
            'password': password,
            'email': email
        }
        try:
            mail.send(msg)
            return render_template('confirm_email.html', data=data)
        except Exception as e:
            print(e)
            return "The email was not sent"
    return render_template('signup.html')


@app.route('/resendEmail', methods=["POST", "GET"])
def resendEmail():
    return render_template('confirm_email.html')


@app.route('/test')
def test():
    return render_template('confirm_email.html')


@app.route('/confirmEmailSuccess/<username>/<email>', methods=["POST", "GET"])
def confirm_email(username, email):
    found_user = User.query.filter_by(username=username).first()
    email = hash[email]
    found_user.email = email
    db.session.commit()
    notification = ["Account created! Please log in again", 1]
    flash(notification)
    return redirect(url_for("log_in"))


@app.route('/log_out')
def log_out():
    session.pop("username", None)
    return redirect(url_for('log_in'))


@app.route('/dashboard')
def dashboard():
    if "username" in session:
        username = session["username"]
        found_user = User.query.filter_by(username=username).first()
        name = found_user.name
        photo_url = found_user.photo_url
        email = found_user.email
        math = random.sample(l, 5)
        math_real = []
        for m in math:
            tmp  = m[0].split("b'")[1]
            tmp2 = m[1].split("b'")[1]
            math_real.append([tmp.split(".\\n'")[0], tmp2.split("\\n")[0]])
        print(math)
        return render_template('dashboard.html', username=username, name=name, photo_url=photo_url, email=email, l=math_real)
    else:
        return redirect(url_for("log_in"))

# Room Handling


@app.route('/create_room', methods=["POST", "GET"])
def create_room():
    username = session["username"]
    if (request.method == "POST"):
        room_name = request.form["room_name"]
        room_color = request.form["room_color"]
        room_description = request.form["room_description"]
        found_user = User.query.filter_by(username=username).first()
        random_room_password = ''.join(random.choice(
            string.ascii_letters + string.digits) for _ in range(10))
        room = Room(room_name, found_user.id, random_room_password,
                    room_color, room_description)
        db.session.add(room)
        db.session.commit()
        room_id = str(room.id)
        if (found_user.room == ''):
            found_user.room = room_id
        else:
            found_user.room = found_user.room + "####" + room_id
        db.session.commit()
        return redirect(url_for('join_room'))
    found_user = User.query.filter_by(username=username).first()
    return render_template('create_room.html', photo_url=found_user.photo_url, name=found_user.name)


@app.route('/join_room', methods=["POST", "GET"])
def join_room():
    username = session["username"]
    found_user = User.query.filter_by(username=username).first()
    all_rooms = found_user.room.split("####")
    all_rooms_attribute = []
    for room in all_rooms:
        all_rooms_attribute.append(Room.query.filter_by(id=room).first())
    if all_rooms[0] == '':
        return render_template('join_room.html', all_rooms_attribute=all_rooms_attribute[1:-1], photo_url=found_user.photo_url, name=found_user.name)
    return render_template('join_room.html', all_rooms_attribute=all_rooms_attribute, photo_url=found_user.photo_url, name=found_user.name)


@app.route('/remove_room', methods=["POST", "GET"])
def remove_room():
    username = session["username"]
    if request.method == "POST":
        remove_room_id = request.form["remove_room_id"]
        found_user = User.query.filter_by(username=username).first()
        found_room = Room.query.filter_by(id=remove_room_id).first()
        tmp = found_user.room.split("####")
        found_user.room = ''
        for i in range(0, len(tmp)):
            if tmp[i] != remove_room_id:
                if found_user.room == '':
                    found_user.room = found_user.room + tmp[i]
                else:
                    found_user.room = found_user.room + "####" + tmp[i]
        tmp = found_room.participants.split("####")
        found_room.participants = ''
        # print(found_user.id)
        for i in range(0, len(tmp)):

            if tmp[i] != str(found_user.id):
                if found_room.participants == '':
                    found_room.participants = found_room.participants + tmp[i]
                else:
                    found_room.participants = found_room.participants + \
                        "####" + tmp[i]
        # print(found_room.participants)
        # print(found_user.room)
        db.session.commit()
    return "Remove Complete"


@app.route('/add_room/', methods=["POST", "GET"])
def add_room():
    username = session["username"]
    if request.method == "POST":
        add_room_id = request.form["add_room_id"]
        add_room_password = request.form["add_room_password"]
        add_room_link = request.form["add_room_link"]
        if add_room_link != '':
            tmp = add_room_link.split(
                "http://127.0.0.1:5000/add_room/")[1].split("/")
            add_room_id = tmp[0]
            add_room_password = tmp[1]
        found_user = User.query.filter_by(username=username).first()
        found_room = Room.query.filter_by(id=add_room_id).first()
        if found_room == None:
            flash("Room ID not found")
            return redirect(url_for('add_room'))
        if found_room.password != add_room_password:
            flash("Room password doesn't match")
            return redirect(url_for('add_room'))
        if str(found_user.id) in found_room.participants.split("####"):
            flash("You've joined this room")
            return redirect(url_for('add_room'))
        found_room.participants = found_room.participants + \
            "####" + str(found_user.id)
        if found_user.room == '':
            found_user.room = add_room_id
        else:
            found_user.room = found_user.room + "####" + add_room_id
        db.session.commit()
    return "Add Complete"


@socketio.on('message')
def handle_message(message):
    print(message)
    msg = message.split("$$$$")
    if msg[0] == 'challenge':

        send(msg, broadcast=True)
    else:
        found_room = Room.query.filter_by(id=msg[0]).first()
        found_user = User.query.filter_by(id=msg[1]).first()
        found_room.chat += "####" + found_user.name + "^^^^" + msg[2] + "^^^^" + found_user.photo_url
        db.session.commit()
        
        msg[1] = found_user.name
        msg.append(found_user.photo_url)
        print(msg)
        send(msg, broadcast=True)


@app.route('/useRoom/<room_id>', methods=["POST", "GET"])
def use_room(room_id):
    username = session["username"]
    found_user = User.query.filter_by(username=username).first()
    if room_id not in found_user.room.split("####"):
        flash("You haven't joined this room")
        return redirect(url_for('join_room'))
    found_room = Room.query.filter_by(id=room_id).first()
    found_room.participants = found_room.participants.split("####")
    room_link = "http://127.0.0.1:5000/add_room/" + \
        str(found_room.id) + "/" + found_room.password
    ranking = found_room.top
    ranking = ranking.split('$$$$')
    ranking_real = []

    def myFunc(e):
        return -int(e[1])
    for i in ranking:
        tmp = i.split('^^^^')
        ranking_real.append([tmp[0], tmp[1], tmp[2], tmp[3]])
        ranking_real.sort(key=myFunc)

    tmp = found_room.chat.split("####")
    tmp2 = []
    for i in range(1, len(tmp)):
        tmp2.append(tmp[i].split("^^^^"))
    print(tmp)
    return render_template('room.html', data=found_room, photo_url=found_user.photo_url, room_link=room_link, user_id=str(found_user.id), 
                           chat=tmp2, name=found_user.name, ranking=ranking_real)


@app.route('/challenge/<room_id>', methods=["POST", "GET"])
def challenge(room_id):
    username = session["username"]
    found_user = User.query.filter_by(username=username).first()
    found_room = Room.query.filter_by(id=room_id).first()
    with open('challenge_question.json') as json_file:
        question = json.load(json_file)
    print(type(question))
    return render_template('challenge.html', photo_url=found_user.photo_url, name=found_user.name, question=question, data=found_room)


@app.route('/change_answer', methods=["POST", "GET"])
def change():
    if request.method == "POST":
        answer = request.form["answer"]
        return unidecode(answer).lower()
    return answer


@app.route('/res', methods=["POST", "GET"])
def res():
    if request.method == "POST":
        score = request.form["score"]
        name = request.form["name"]
        found_user = User.query.filter_by(name=name).first()
        room = request.form["room"]
        found_room = Room.query.filter_by(id=room).first()
        found_room.top = found_room.top + "$$$$" + \
            str(found_user.id) + "^^^^" + str(score) + "^^^^" + found_user.photo_url + "^^^^" + found_user.name
        db.session.commit()
    return "123"


@app.route("/individual_room")
def individual_room():
    return render_template("individual_room.html")

@app.route('/get_emilia_message', methods=["POST", "GET"])
def get_emilia_message():
    username = session["username"]
    message = request.form.get('msg')
    found_user = User.query.filter_by(username=username).first()

    return [get_emilia_response(unidecode(message)), found_user.name, found_user.photo_url]

@app.route('/chat', methods=["POST", "GET"])
def chat():
    username = session["username"]
    found_user = User.query.filter_by(username=username).first()
    return render_template('chat.html', photo_url=found_user.photo_url, name=found_user.name)

@app.route("/users")
def users():
    user_list = db.session.execute(
        db.select(User).order_by(User.username)).scalars()
    return render_template("listUsers.html", users=user_list)


@app.route("/rooms")
def rooms():
    user_list = db.session.execute(
        db.select(Room).order_by(Room.name)).scalars()
    return render_template("listRooms.html", users=user_list)

# Setting up


@app.route('/setting_up', methods=["POST", "GET"])
def setting_up():
    username = session["username"]
    found_user = User.query.filter_by(username=username).first()
    if request.method == "POST":
        name = request.form["name"]

        avatar = request.files["new-avatar"]
        filename = avatar.filename
        arr = ["png", "jpg", "jpeg", "gif", "svg"]
        if (filename != ''):
            # flash("Không có ảnh nào được gửi lên")
            # return redirect(url_for("setting_up"))
            if (filename.split('.')[1] not in arr):
                flash("File phải là hình ảnh có đuôi png, jpg, jpeg, gif, svg")
                return redirect(url_for("setting_up"))
            else:
                filename = secure_filename(avatar.filename)
                filename = username + '.' + avatar.filename.rsplit('.')[1]
                avatar.save(os.path.join(
                    current_app.config.get('UPLOAD_FOLDER'), filename))
                found_user.photo_url = filename

        found_user.name = name
        db.session.commit()
    return render_template('setting_up.html', photo_url=found_user.photo_url, username=username, name=found_user.name, email=found_user.email)


@app.route("/delete_user/<username>")
def delete_user(username):
    found_user = User.query.filter_by(username=username).first()
    session.pop("username", None)
    db.session.delete(found_user)
    db.session.commit()
    return redirect(url_for("log_in"))


# Run the app
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    # socketio.run(app, debug=True, host="192.168.1.104", port=5000)
    socketio.run(app, debug=True)
